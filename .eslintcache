[{"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\index.tsx":"1","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\reportWebVitals.ts":"2","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\layout\\layout.tsx":"3","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\auth\\auth.tsx":"4","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\home\\home.tsx":"5","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\page-not-found\\page-not-found.tsx":"6","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\report-maker\\report-maker.tsx":"7","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\report\\report.tsx":"8","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\store.js":"9","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\actionType.ts":"10","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx":"11","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\all-clients\\all-clients.tsx":"12","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\campaigns\\campaigns.tsx":"13","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx":"14","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx":"15","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\link-pop-up\\link-pop-up.tsx":"16","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\reportModel.ts":"17","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\top-report-nav\\top-report-nav.tsx":"18","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\reducer.ts":"19","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\middleware.ts":"20","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\appState.ts":"21","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\productModel.ts":"22","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\campaignModel.ts":"23","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\config.ts":"24","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\data\\report.ts":"25","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\data\\products.ts":"26","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\add-client-pop-up\\add-client-pop-up.tsx":"27","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\product-pop-up\\product-pop-up.tsx":"28","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\productsTypeModel.ts":"29","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\auth-for-watching-only\\auth-for-watching-only.tsx":"30","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\userModel.ts":"31","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\restore-state-pop-up\\restore-state-pop-up.tsx":"32","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\reports-history-pop-up\\reports-history-pop-up.tsx":"33","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\link-pop-up-from-report\\link-pop-up-from-report.tsx":"34"},{"size":333,"mtime":1611505975157,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":1160,"mtime":1611650392114,"results":"38","hashOfConfig":"36"},{"size":8585,"mtime":1612163932085,"results":"39","hashOfConfig":"36"},{"size":2713,"mtime":1612165401575,"results":"40","hashOfConfig":"36"},{"size":298,"mtime":1611505975127,"results":"41","hashOfConfig":"36"},{"size":4050,"mtime":1612273080544,"results":"42","hashOfConfig":"36"},{"size":4174,"mtime":1612263286241,"results":"43","hashOfConfig":"36"},{"size":291,"mtime":1611505975166,"results":"44","hashOfConfig":"36"},{"size":840,"mtime":1612272517076,"results":"45","hashOfConfig":"36"},{"size":6149,"mtime":1612271243839,"results":"46","hashOfConfig":"36"},{"size":7088,"mtime":1612271128448,"results":"47","hashOfConfig":"36"},{"size":13812,"mtime":1612263675870,"results":"48","hashOfConfig":"36"},{"size":11279,"mtime":1611816316434,"results":"49","hashOfConfig":"36"},{"size":14557,"mtime":1612264861168,"results":"50","hashOfConfig":"36"},{"size":6258,"mtime":1612271524311,"results":"51","hashOfConfig":"36"},{"size":648,"mtime":1612257069283,"results":"52","hashOfConfig":"36"},{"size":7071,"mtime":1611816316469,"results":"53","hashOfConfig":"36"},{"size":6100,"mtime":1612272986131,"results":"54","hashOfConfig":"36"},{"size":511,"mtime":1612107919088,"results":"55","hashOfConfig":"36"},{"size":2765,"mtime":1612272491403,"results":"56","hashOfConfig":"36"},{"size":597,"mtime":1611505975160,"results":"57","hashOfConfig":"36"},{"size":284,"mtime":1611505975158,"results":"58","hashOfConfig":"36"},{"size":344,"mtime":1611505975141,"results":"59","hashOfConfig":"36"},{"size":142324,"mtime":1611505975153,"results":"60","hashOfConfig":"36"},{"size":297904,"mtime":1611509461794,"results":"61","hashOfConfig":"36"},{"size":9171,"mtime":1611507088016,"results":"62","hashOfConfig":"36"},{"size":4619,"mtime":1611516984108,"results":"63","hashOfConfig":"36"},{"size":175,"mtime":1611505975161,"results":"64","hashOfConfig":"36"},{"size":6905,"mtime":1612101768232,"results":"65","hashOfConfig":"36"},{"size":186,"mtime":1611646386718,"results":"66","hashOfConfig":"36"},{"size":2173,"mtime":1612270883752,"results":"67","hashOfConfig":"36"},{"size":6170,"mtime":1612272849625,"results":"68","hashOfConfig":"36"},{"size":2926,"mtime":1612273323060,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"10j0122",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"72"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"72"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\index.tsx",[],["149","150"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\reportWebVitals.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\layout\\layout.tsx",["151"],"import React, { Component } from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { Auth } from \"../auth/auth\";\r\nimport { Home } from \"../home/home\";\r\nimport { PageNotFound } from \"../page-not-found/page-not-found\";\r\nimport { ReportMaker } from \"../report-maker/report-maker\";\r\nimport { Report } from \"../report/report\";\r\nimport axios from \"axios\";\r\nimport \"./layout.css\";\r\n\r\n\r\n\r\nexport class Layout extends Component {\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"layout\">\r\n                <BrowserRouter>\r\n\r\n                    <Switch>\r\n                        <Route path=\"/auth\" component={Auth} exact />\r\n                        <Route path=\"/report-maker\" component={ReportMaker} exact />\r\n                        <Route path=\"/home\" component={Home} exact />\r\n                        <Route path=\"/page-not-found\" component={PageNotFound} exact />\r\n                        <Route path=\"/:uuid\" component={Report} />\r\n                        <Redirect from=\"/\" to=\"/home\" />\r\n                    </Switch>\r\n\r\n                </BrowserRouter>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\auth\\auth.tsx",["152","153","154","155"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\home\\home.tsx",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\page-not-found\\page-not-found.tsx",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\report-maker\\report-maker.tsx",["156","157"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\report\\report.tsx",["158","159"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\store.js",[],["160","161"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\actionType.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx",["162","163","164","165","166"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\all-clients\\all-clients.tsx",["167","168","169","170","171"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\campaigns\\campaigns.tsx",["172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188"],"import { exec } from \"child_process\";\r\nimport React, { Component } from \"react\";\r\nimport \"./campaigns.css\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { getAllCampaigns } from \"../../data/campaigns\";\r\nimport { getAllProducts } from \"../../data/products\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { getProductsTypes } from \"../../data/products-types\";\r\nimport { ProductPopUp } from \"../product-pop-up/product-pop-up\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Aos from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport axios from \"axios\";\r\nimport { ProductsType } from \"../../models/productsTypeModel\";\r\n\r\ninterface ReportMakerState {\r\n    selectedClients: ClientModel[],\r\n    selectedCampaigns: CampaignModel[],\r\n    selectedProducts: ProductModel[]\r\n    productsToDisplay: ProductModel[],\r\n    campaignsToDisplay: CampaignModel[],\r\n    display: boolean,\r\n    productToPopUp: ProductModel,\r\n    productTypes: ProductsType[]\r\n    campignToPopUp: CampaignModel,\r\n    showLoader: boolean\r\n}\r\n\r\n\r\n\r\nexport class Campaigns extends Component<any, ReportMakerState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    private filteringMenuRef = React.createRef<HTMLDivElement>();\r\n\r\n\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            selectedCampaigns: store.getState().selectedCampaigns,\r\n            selectedProducts: store.getState().selectedProducts,\r\n            campaignsToDisplay: store.getState().campaignsToDisplay,\r\n            productsToDisplay: store.getState().campaignsToDisplay,\r\n            display: store.getState().isPopUpShow,\r\n            productToPopUp: new ProductModel(),\r\n            campignToPopUp: new CampaignModel(),\r\n            productTypes: [],\r\n            showLoader: false\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const selectedCampaigns = store.getState().selectedCampaigns;\r\n            const selectedProducts = store.getState().selectedProducts;\r\n            const campaignsToDisplay = store.getState().campaignsToDisplay;\r\n            const productsToDisplay = store.getState().productsToDisplay;\r\n            const display = store.getState().isProductsPopUpShow;\r\n            this.setState({ selectedClients });\r\n            this.setState({ selectedCampaigns });\r\n            this.setState({ selectedProducts });\r\n            this.setState({ campaignsToDisplay });\r\n            this.setState({ productsToDisplay });\r\n            this.setState({ display });\r\n\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            this.setState({ showLoader: true });\r\n            setTimeout(async () => {\r\n\r\n                const response = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-campaigns/\");\r\n                const allCampaigns: CampaignModel[] = response.data.campaigns;\r\n                Aos.init({ duration: 1000 });\r\n\r\n                const selectedCampaigns: CampaignModel[] = store.getState().selectedCampaigns;\r\n\r\n                if (store.getState().selectedCampaigns.length === 0) {\r\n                    this.state.selectedClients.map(client => {\r\n                        allCampaigns.map(campaign => {\r\n                            if (campaign.clientId === client.clientId) {\r\n                                selectedCampaigns.push(campaign);\r\n                            }\r\n                        })\r\n                    })\r\n                    this.setState({ selectedCampaigns });\r\n                    store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: selectedCampaigns });\r\n                }\r\n                this.setState({ showLoader: false });\r\n\r\n                if (store.getState().selectedProducts.length === 0) {\r\n                    const responseForProducts = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-products\");\r\n                    const allProductsFromDb: ProductModel[] = responseForProducts.data.products;\r\n\r\n                    const selectedProducts: ProductModel[] = [];\r\n                    selectedCampaigns.map(campaign => {\r\n                        allProductsFromDb.map(product => {\r\n                            if (product.campaignId === campaign.campaignId) {\r\n                                selectedProducts.push(product);\r\n\r\n                            }\r\n                        })\r\n                    });\r\n\r\n                    this.setState({ selectedProducts });\r\n                    store.dispatch({ type: ActionType.getSelectedProducts, payLoad: selectedProducts });\r\n                }\r\n\r\n                const responseForTypes = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-products-types/\");\r\n                const productsTypes: ProductsType[] = responseForTypes.data.productsTypes;\r\n                this.setState({ productTypes: productsTypes });\r\n            }, 1000);\r\n\r\n        }\r\n        catch (err) {\r\n            console.log(err.message);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public getProductTypeName = (productTypeId: number) => {\r\n\r\n        for (const type of this.state.productTypes) {\r\n            if (type.productsTypeId === productTypeId) {\r\n                return type.nameForSingle;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    //Return colors for light button by success rates (green/yellow/red)\r\n    public getSuccessRateColor = (successRate: number) => {\r\n        if (successRate <= 50) {\r\n            return \"#E4002B\";\r\n        }\r\n        else if (successRate > 50 && successRate < 80) {\r\n            return \"#FFDB48\";\r\n        }\r\n\r\n        else if (successRate >= 80) {\r\n            return \"#1CE5A2\";\r\n        }\r\n    }\r\n\r\n\r\n    //Product is automaticlly sending to Pop Up by props \r\n    public setProductToDisplayInPopUp = (product: ProductModel, campaign: CampaignModel) => (event: any) => {\r\n        this.setState({ productToPopUp: product });\r\n        this.setState({ campignToPopUp: campaign });\r\n        store.dispatch({ type: ActionType.changeDisplayForProductsPopUp });\r\n    }\r\n\r\n\r\n    //If campaign have product to disaply - show his name on title\r\n    public isProductsToDisplayOnCampaign = (campaignId: number) => {\r\n        if (this.state.productsToDisplay.length !== 0) {\r\n            const productsToDisplay = this.state.productsToDisplay.filter(p => p.campaignId === campaignId);\r\n            if (productsToDisplay.length === 0) {\r\n                return false;\r\n            }\r\n            return true;\r\n\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public changeDisplayForMobileMenu = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForMobileMenu })\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"campaigns\">\r\n\r\n                <img className=\"loader\" src=\"./assets/images/loading.gif\" style={{ display: this.state.showLoader ? \"block\" : \"none\" }} />\r\n\r\n                <div className=\"campaigns-left-filter\" ref={this.filteringMenuRef}>\r\n                    <img className=\"campaigns-filter-by-success-img\" src=\"./assets/images/filter_by_date.svg\" />\r\n                    <span className=\"campaigns-filter-by-high\">Highest first</span>\r\n                    <span className=\"campaigns-separate\">|</span>\r\n                    <span className=\"campaigns-filter-by-low\">Lowest first</span>\r\n\r\n                    <IconButton className=\"filter-icon\" onClick={this.changeDisplayForMobileMenu}>\r\n                        <FilterListIcon />\r\n                    </IconButton>\r\n                </div>\r\n\r\n                {this.state.campaignsToDisplay.length !== 0 && this.state.campaignsToDisplay?.map(campaign =>\r\n                    <div className=\"client-in-campaigns\">\r\n                        {this.isProductsToDisplayOnCampaign(campaign.campaignId as number) && <h2>{campaign.campaignName}</h2>}\r\n                        <div className=\"grid\">\r\n                            \r\n                            {this.state.productsToDisplay.length === 0 && this.state.selectedProducts?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n                            )}\r\n                           \r\n                            {this.state.productsToDisplay.length !== 0 && this.state.productsToDisplay?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {this.state.campaignsToDisplay.length === 0 && this.state.selectedCampaigns?.map(campaign =>\r\n                    <div className=\"client-in-campaigns\">\r\n                        {this.isProductsToDisplayOnCampaign(campaign.campaignId as number) && <h2>{campaign.campaignName}</h2>}\r\n                        <div className=\"grid\">\r\n                            {this.state.productsToDisplay.length === 0 && this.state.selectedProducts?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                            {this.state.productsToDisplay.length !== 0 && this.state.productsToDisplay?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <img className=\"up-btn\" onClick={() => this.filteringMenuRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"nearest\" })} src=\"/assets/images/pink_btn_after.svg\" />\r\n                {this.state.display && <ProductPopUp campaign={this.state.campignToPopUp} product={this.state.productToPopUp} />}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx",["189","190","191","192"],"import React, { Component, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { ProductsType } from \"../../models/productsTypeModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport { AddClientPopUp } from \"../add-client-pop-up/add-client-pop-up\";\r\nimport { AllClients } from \"../all-clients/all-clients\";\r\nimport \"./top-campaigns-nav.css\";\r\n\r\ninterface TopCampaignsNavProps {\r\n    isScroll: boolean\r\n}\r\n\r\ninterface TopCampaignsNavState {\r\n    selectedClients: ClientModel[],\r\n    clientsToDisplay: ClientModel[],\r\n    isButtonsScrolled: boolean,\r\n    display: boolean,\r\n    filteringBefore: {\r\n        beforeCampaignsToDisplay: CampaignModel[],\r\n        beforeProductsToDisplay: ProductModel[]\r\n\r\n    },\r\n    showLogout: boolean\r\n}\r\n\r\nexport class TopCampaignsNav extends Component<TopCampaignsNavProps, TopCampaignsNavState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    public buttonsRef = React.createRef<HTMLDivElement>();\r\n    public topNavRef = React.createRef<HTMLDivElement>();\r\n\r\n\r\n    public constructor(props: TopCampaignsNavProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            clientsToDisplay: store.getState().clientsToDisplay,\r\n            isButtonsScrolled: false,\r\n            display: store.getState().isPopUpShow,\r\n            filteringBefore: {\r\n                beforeCampaignsToDisplay: [],\r\n                beforeProductsToDisplay: []\r\n            },\r\n            showLogout: false\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const display = store.getState().isPopUpShow;\r\n            const clientsToDisplay = store.getState().clientsToDisplay;\r\n            this.setState({ selectedClients });\r\n            this.setState({ display });\r\n            this.setState({ clientsToDisplay });\r\n\r\n\r\n            const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n            const maxWidth = topNavWidth / 100 * 70;\r\n            const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n            if (buttonsWidth > maxWidth) {\r\n                this.setState({ isButtonsScrolled: true });\r\n            }\r\n            else {\r\n                this.setState({ isButtonsScrolled: false });\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n        const maxWidth = topNavWidth / 100 * 70;\r\n        const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n\r\n        if (buttonsWidth > maxWidth) {\r\n            this.setState({ isButtonsScrolled: true });\r\n        }\r\n        else {\r\n            this.setState({ isButtonsScrolled: false });\r\n        }\r\n\r\n\r\n        window.addEventListener(\"click\", () => {\r\n            const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n            const maxWidth = topNavWidth / 100 * 70;\r\n            const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n            if (buttonsWidth > maxWidth) {\r\n                this.setState({ isButtonsScrolled: true });\r\n            }\r\n            else {\r\n                this.setState({ isButtonsScrolled: false });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    public filterByClientId = (clientId: number) => (event: any) => {\r\n\r\n        const campaignsToDisplay: CampaignModel[] = [];\r\n\r\n        const filteringBefore = { ...this.state.filteringBefore };\r\n        filteringBefore.beforeCampaignsToDisplay = store.getState().campaignsToDisplay;\r\n        filteringBefore.beforeProductsToDisplay = store.getState().productsToDisplay;\r\n        this.setState({ filteringBefore });\r\n\r\n        const allSelectedCampaigns = store.getState().selectedCampaigns;\r\n        for (const c of allSelectedCampaigns) {\r\n            if (c.clientId === clientId) {\r\n                campaignsToDisplay.push(c);\r\n            }\r\n        }\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: campaignsToDisplay });\r\n\r\n\r\n        const clientsToDisplay: ClientModel[] = [];\r\n        const allSelectedClients = store.getState().selectedClients;\r\n        for (const c of allSelectedClients) {\r\n            if (c.clientId === clientId) {\r\n                clientsToDisplay.push(c);\r\n            }\r\n        }\r\n\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: clientsToDisplay });\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public scrollToRight = () => {\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public scrollToLeft = () => {\r\n        const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: -buttonsWidth,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n\r\n    public removeClient = (clientId: number) => (event: any) => {\r\n\r\n        //Remove from clients in redux\r\n        const selectedClients = [...this.state.selectedClients];\r\n        const index = selectedClients.findIndex(c => c.clientId === clientId);\r\n        selectedClients.splice(index, 1);\r\n        this.setState({ selectedClients });\r\n\r\n        store.dispatch({ type: ActionType.removeClient, payLoad: clientId });\r\n\r\n    }\r\n\r\n    public openPopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForPopUp, payLoad: false });\r\n    }\r\n\r\n    public resetClientsToDisplay = () => {\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: [] });\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: this.state.filteringBefore.beforeCampaignsToDisplay });\r\n        store.dispatch({ type: ActionType.updateProductsToDisplay, payLoad: this.state.filteringBefore.beforeProductsToDisplay });\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div ref={this.topNavRef} className=\"top-campaigns-nav\">\r\n                <div ref={this.buttonsRef} className=\"campaigns-buttons\">\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-start-of-buttons-section\" onMouseEnter={this.scrollToRight}></div>\r\n\r\n\r\n\r\n                    {this.state.clientsToDisplay.length === 0 && this.state?.selectedClients.map(client =>\r\n                        <button className=\"campaigns-client-btn\" onClick={this.filterByClientId(client.clientId as number)}>\r\n                            <button className=\"campaigns-remove-btn\" onClick={this.removeClient(client.clientId as number)}>\r\n                                <span>&#10006;</span>\r\n                            </button>\r\n                            <span className=\"campaigns-inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    {this.state.clientsToDisplay.length > 0 && this.state?.clientsToDisplay.map(client =>\r\n                        <button className=\"campaigns-client-btn\" onClick={this.filterByClientId(client.clientId as number)}>\r\n                            <button className=\"campaigns-remove-btn\" onClick={this.removeClient(client.clientId as number)}>\r\n                                <span>&#10006;</span>\r\n                            </button>\r\n                            <span className=\"campaigns-inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    <button className=\"campaigns-client-btn\">\r\n                        <button className=\"campaigns-remove-btn\">\r\n                            <span>&#10006;</span>\r\n                        </button>\r\n                        <span className=\"campaigns-inside-client-btn\">Client</span>\r\n                    </button>\r\n\r\n                    <button className=\"campaigns-client-btn\">\r\n                        <button className=\"campaigns-remove-btn\">\r\n                            <span>&#10006;</span>\r\n                        </button>\r\n                        <span className=\"campaigns-inside-client-btn\">Client</span>\r\n                    </button>\r\n\r\n                    <button className=\"campaigns-client-btn\">\r\n                        <button className=\"campaigns-remove-btn\">\r\n                            <span>&#10006;</span>\r\n                        </button>\r\n                        <span className=\"campaigns-inside-client-btn\">Client</span>\r\n                    </button>\r\n\r\n                    <button className=\"campaigns-client-btn\">\r\n                        <button className=\"campaigns-remove-btn\">\r\n                            <span>&#10006;</span>\r\n                        </button>\r\n                        <span className=\"campaigns-inside-client-btn\">Client</span>\r\n                    </button>\r\n\r\n\r\n\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-end-of-buttons-section\" onMouseEnter={this.scrollToLeft}>\r\n                        <span className=\"campaigns-more-buttons-icon\">|</span>\r\n                    </div>\r\n                </div>\r\n\r\n                {this.state.clientsToDisplay.length === 0 &&\r\n                    <span className=\"add-client-span\" onClick={this.openPopUp}>הוספת לקוח</span>}\r\n\r\n                <span className=\"logout-span\" onClick={()=>this.setState({showLogout: true})}>logout</span>\r\n\r\n                {this.state.clientsToDisplay.length > 0 &&\r\n                    <span className=\"add-client-span\" onClick={this.resetClientsToDisplay}>כל הלקוחות</span>}\r\n\r\n                <div className=\"campaigns-top-scroll\" style={{ top: this.props.isScroll ? this.topNavRef.current?.clientHeight : 0 }}></div>\r\n\r\n                <NavLink to=\"/home\">\r\n                    <img className=\"campaigns-logo\" src=\"./assets/images/logo_factory.svg\" />\r\n                </NavLink>\r\n\r\n                {this.state.display &&\r\n                    <AddClientPopUp />\r\n                }\r\n\r\n\r\n                {this.state.showLogout &&\r\n                    <div className=\"logout-dialog\" >\r\n                        <span className=\"logout-subtitle\">התנתקות מהמערכת תמחק את כל הבחירות הנוכחיות</span>\r\n                        <br />\r\n                        <span className=\"logout-title\">מה ברצונך לעשות?</span>\r\n                        <br />\r\n                        <button className=\"logout-cancel-btn\" onClick={() => this.setState({ showLogout: false })}>אני רוצה להישאר</button>\r\n                        <button className=\"logout-confirm-btn\" onClick={() => store.dispatch({ type: ActionType.logoutEditingMode })}>אני רוצה להתנתק</button>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx",["193","194","195","196","197","198","199","200","201","202"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\link-pop-up\\link-pop-up.tsx",["203","204"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\reportModel.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\top-report-nav\\top-report-nav.tsx",["205","206","207","208"],"import React, { Component, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport { AddClientPopUp } from \"../add-client-pop-up/add-client-pop-up\";\r\nimport { AllClients } from \"../all-clients/all-clients\";\r\nimport \"./top-report-nav.css\";\r\n\r\ninterface TopReportNavProps {\r\n    isScroll: boolean\r\n}\r\n\r\ninterface TopReportNavState {\r\n    selectedClients: ClientModel[],\r\n    isButtonsScrolled: boolean,\r\n    display: boolean,\r\n    filteringBefore: {\r\n        beforeCampaignsToDisplay: CampaignModel[],\r\n        beforeProductsToDisplay: ProductModel[]\r\n\r\n    }\r\n}\r\n\r\nexport class TopReportNav extends Component<TopReportNavProps, TopReportNavState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    public buttonsRef = React.createRef<HTMLDivElement>();\r\n    public topNavRef = React.createRef<HTMLDivElement>();\r\n\r\n\r\n    public constructor(props: TopReportNavProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            isButtonsScrolled: false,\r\n            display: store.getState().isPopUpShow,\r\n            filteringBefore: {\r\n                beforeCampaignsToDisplay: [],\r\n                beforeProductsToDisplay: []\r\n            }\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const display = store.getState().isPopUpShow;\r\n            this.setState({ selectedClients });\r\n            this.setState({ display });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n        const maxWidth = topNavWidth / 100 * 70;\r\n\r\n        window.addEventListener(\"click\", () => {\r\n            const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n            if (buttonsWidth > maxWidth) {\r\n                this.setState({ isButtonsScrolled: true });\r\n            }\r\n            else {\r\n                this.setState({ isButtonsScrolled: false });\r\n            }\r\n        })\r\n    }\r\n\r\n    public filterByClientId = (clientId: number) => (event: any) => {\r\n      \r\n        const campaignsToDisplay: CampaignModel[] = [];\r\n\r\n        const filteringBefore = { ...this.state.filteringBefore };\r\n        filteringBefore.beforeCampaignsToDisplay = store.getState().campaignsToDisplay;\r\n        filteringBefore.beforeProductsToDisplay = store.getState().productsToDisplay;\r\n        this.setState({ filteringBefore });\r\n\r\n        const allSelectedCampaigns = store.getState().selectedCampaigns;\r\n        for (const c of allSelectedCampaigns) {\r\n            if (c.clientId === clientId) {\r\n                campaignsToDisplay.push(c);\r\n            }\r\n        }\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: campaignsToDisplay });\r\n     \r\n\r\n        const clientsToDisplay: ClientModel[] = [];\r\n        const allSelectedClients = store.getState().selectedClients;\r\n        for (const c of allSelectedClients) {\r\n            if (c.clientId === clientId) {\r\n                clientsToDisplay.push(c);\r\n            }\r\n        }\r\n\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: clientsToDisplay });\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public scrollToRight = () => {\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public scrollToLeft = () => {\r\n        const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: -buttonsWidth,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n\r\n    public openPopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForPopUp, payLoad: false });\r\n    }\r\n\r\n    public resetClientsToDisplay = () => {\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: [] });\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: this.state.filteringBefore.beforeCampaignsToDisplay });\r\n        store.dispatch({ type: ActionType.updateProductsToDisplay, payLoad: this.state.filteringBefore.beforeProductsToDisplay });\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div ref={this.topNavRef} className=\"top-campaigns-nav-report\">\r\n                <div ref={this.buttonsRef} className=\"campaigns-buttons\">\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-start-of-buttons-section\" onMouseEnter={this.scrollToRight}></div>\r\n\r\n                    <button className=\"campaigns-client-btn\" onClick={this.resetClientsToDisplay}>\r\n                        <button className=\"campaigns-remove-btn\" style={{ opacity: 0 }}>\r\n                            <span>&#10006;</span>\r\n                        </button>\r\n                        <span className=\"campaigns-inside-client-btn\">All</span>\r\n                    </button>\r\n\r\n\r\n                    {this.state?.selectedClients.map(client =>\r\n                        <button className=\"campaigns-client-btn\" onClick={this.filterByClientId(client.clientId as number)}>\r\n                            <span className=\"campaigns-inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-end-of-buttons-section\" onMouseEnter={this.scrollToLeft}>\r\n                        <span className=\"campaigns-more-buttons-icon\">|</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"campaigns-top-scroll\" style={{ top: this.props.isScroll ? \"6vw\" : 0 }}></div>\r\n\r\n                <img className=\"campaigns-logo\" src=\"./assets/images/logo_factory.svg\" />\r\n\r\n                {this.state.display &&\r\n                    <AddClientPopUp />\r\n                }\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\reducer.ts",["209"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\middleware.ts",["210","211","212"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\redux\\appState.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\productModel.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\campaignModel.ts",["213"],"import { ProductModel } from \"./productModel\";\r\n\r\nexport class CampaignModel {\r\n  public constructor(\r\n    public campaignId?: number,\r\n    public clientId?: number,\r\n    public campaignName?: string,\r\n    public lastUpdate?: string,\r\n    public timePassed?: number\r\n\r\n  ) {\r\n  }\r\n}\r\n","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\config.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\data\\report.ts",[],["214","215"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\data\\products.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\add-client-pop-up\\add-client-pop-up.tsx",["216","217","218","219","220","221","222","223"],"import React, { Component } from \"react\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./add-client-pop-up.css\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { getAllCampaigns } from \"../../data/campaigns\";\r\nimport { getAllProducts } from \"../../data/products\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport axios from \"axios\";\r\n\r\ninterface AddClientPopUpState {\r\n    allClients: ClientModel[],\r\n    companies: string[],\r\n    clientsToAdd: ClientModel[]\r\n}\r\n\r\nexport class AddClientPopUp extends Component<any, AddClientPopUpState>{\r\n\r\n    private companies: string[] = [];\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            allClients: store.getState().allClients,\r\n            companies: [],\r\n            clientsToAdd: []\r\n        }\r\n    }\r\n\r\n    public closePopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForPopUp, payLoad: true });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const reponse = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-clients/\");\r\n            const allClients:ClientModel[] = reponse.data.clients;\r\n            this.setState({ allClients });\r\n\r\n            let companies: string[] = [];\r\n            allClients.map(client => {\r\n                const duplicate = companies.find(c => c === client.company);\r\n                if (!duplicate) {\r\n                    companies.push(client.company as string);\r\n                }\r\n            })\r\n            this.setState({ companies });\r\n        }\r\n        catch (err) {\r\n            console.log(err.message);\r\n        }\r\n    }\r\n\r\n    public stopPropagation = (e: any) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    public addClient = (client: ClientModel) => (event: any) => {\r\n        const clientsToAdd = [...this.state.clientsToAdd];\r\n        for (const c of clientsToAdd) {\r\n            if (c.clientId === client.clientId) {\r\n                const index = clientsToAdd.indexOf(c);\r\n                clientsToAdd.splice(index, 1);\r\n                this.setState({ clientsToAdd });\r\n                return;\r\n            }\r\n        }\r\n\r\n        clientsToAdd.push(client);\r\n        this.setState({ clientsToAdd });\r\n\r\n    }\r\n\r\n    public isSelcected = (clientId: number) => {\r\n        for (const c of this.state.clientsToAdd) {\r\n            if (c.clientId === clientId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public addClientsToReport = async () => {\r\n        try{\r\n\r\n            const selectedClients = store.getState().selectedClients;\r\n            for (const c of this.state.clientsToAdd) {\r\n                selectedClients.push(c);\r\n            }\r\n            store.dispatch({ type: ActionType.updateSelectedClients, payLoad: selectedClients });\r\n            store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: [] });\r\n\r\n            const response = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-campaigns/\");\r\n            const allCampaignsInDb:CampaignModel[] = response.data.campaigns;\r\n\r\n            const selectedCampaigns: CampaignModel[] = store.getState().selectedCampaigns;\r\n            this.state.clientsToAdd.map(client => {\r\n                allCampaignsInDb.map(campaign => {\r\n                    if (campaign.clientId === client.clientId) {\r\n                        selectedCampaigns.push(campaign);\r\n                    }\r\n                })\r\n            })\r\n\r\n            const allProductsResponse = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-products\");\r\n            const allProducts: ProductModel[] = allProductsResponse.data.products;\r\n    \r\n            store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: selectedCampaigns });\r\n    \r\n            const selectedProducts: ProductModel[] = store.getState().selectedProducts;\r\n            this.state.clientsToAdd.map(client => {\r\n                allProducts.map(product => {\r\n                    if (product.clientId === client.clientId) {\r\n                        selectedProducts.push(product);\r\n    \r\n                    }\r\n                })\r\n            })\r\n            store.dispatch({ type: ActionType.getSelectedProducts, payLoad: selectedProducts });\r\n    \r\n            this.closePopUp();\r\n\r\n        }\r\n        catch(err){\r\n            console.log(err.message);\r\n        }\r\n    }\r\n\r\n    public isExist = (clientId: number) => {\r\n        const selectedClients = [...store.getState().selectedClients];\r\n        for (const c of selectedClients) {\r\n            if (c.clientId === clientId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"full-screen-conatiner\" onClick={this.closePopUp}>\r\n                <div className=\"small-conatiner\" onClick={this.stopPropagation}>\r\n                    <button className=\"close-pop-up-btn\" onClick={this.closePopUp} ><CloseIcon /></button>\r\n                    <div className=\"clients-in-pop-up\">\r\n                        {this.state.companies?.map(company =>\r\n                            <div className=\"company\">\r\n                                <span className=\"company-name\">לקוחות {company}</span>\r\n                                <div className=\"client-in-pop-up\">\r\n                                    {this.state.allClients?.map(client =>\r\n                                        client.company === company &&\r\n                                        <button style={{\r\n                                            backgroundColor: this.isSelcected(client.clientId as number) ? \"black\" : \"\",\r\n                                            color: this.isSelcected(client.clientId as number) ? \"white\" : \"\"\r\n                                        }}\r\n                                            onClick={this.addClient(client)} className=\"pop-up-btn\"\r\n                                            disabled={this.isExist(client.clientId as number)}>\r\n                                            {client.clientName}\r\n                                        </button>\r\n\r\n                                    )}\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <button onClick={this.addClientsToReport} disabled={this.state.clientsToAdd.length === 0} className=\"add-client-in-pop-up\">הוספה</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\product-pop-up\\product-pop-up.tsx",["224","225","226"],"import React, { Component } from \"react\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./product-pop-up.css\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ProductsType } from \"../../models/productsTypeModel\";\r\nimport { getProductsTypes } from \"../../data/products-types\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport ProgressBar from '@ramonak/react-progress-bar';\r\nimport axios from \"axios\";\r\n\r\n\r\ninterface ProductPopUpProps {\r\n    product: ProductModel,\r\n    campaign: CampaignModel,\r\n}\r\n\r\ninterface ProductPopUpState {\r\n    images: string[],\r\n    productsType: ProductsType\r\n}\r\n\r\nexport class ProductPopUp extends Component<ProductPopUpProps, ProductPopUpState>{\r\n\r\n    public constructor(props: ProductPopUpProps) {\r\n        super(props);\r\n        this.state = {\r\n            images: [],\r\n            productsType: new ProductsType()\r\n        }\r\n    }\r\n\r\n\r\n    public closePopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForProductsPopUp });\r\n    }\r\n\r\n    public stopPropagation = (e: any) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            if (!this.props.product) {\r\n                this.closePopUp();\r\n            }\r\n            const images: any[] = [];\r\n            let productImages = this.props.product.images;\r\n            if (productImages) {\r\n                Object.values(productImages).map(i => {\r\n                    images.push(i);\r\n                })\r\n\r\n            }\r\n            this.setState({ images });\r\n\r\n            const response = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-products-types/\");\r\n            const productsTypes: ProductsType[] = response.data.productsTypes;\r\n            const productTypes = productsTypes.find(t => t.productsTypeId === this.props.product.productTypeId);\r\n            this.setState({productsType: productTypes as ProductsType});\r\n        }\r\n        catch (err) {\r\n            console.log(err.message);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"full-screen-product-conatiner\" onClick={this.closePopUp} >\r\n                <div className=\"small-product-conatiner\" onClick={this.stopPropagation}>\r\n\r\n\r\n                    <div className=\"left-area\">\r\n                        <div className=\"grid-product\">\r\n                            {this.state.images.map(i =>\r\n                                <img className=\"product-img\" src={i} />\r\n                            )}\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"right-area\">\r\n                        <div className=\"titlesInRightArea\">\r\n                            <div className=\"right-in-titles\">\r\n                                <div className=\"product-rate\">{this.props.product?.successRates} %</div>\r\n                            </div>\r\n                            <div className=\"left-in-titles\">\r\n                                <h1 className=\"type-title\">{this.props.product.productId && this.state.productsType.nameForSingle}</h1>\r\n                                <p className=\"campaign-name-area\">{this.props.campaign?.campaignName}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"bars-area\">\r\n                            <p className=\"bar-title\">Best practice media</p>\r\n                            <p className=\"bar-rate\">65 %</p>\r\n                            <ProgressBar height=\"7px\" borderRadius=\"0\" bgcolor=\"#FFDB48\" completed={65} />\r\n                        </div>\r\n\r\n                        <div className=\"bars-area\">\r\n                            <p className=\"bar-title\">Best practice media</p>\r\n                            <p className=\"bar-rate\">95 %</p>\r\n                            <ProgressBar height=\"7px\" borderRadius=\"0\" bgcolor=\"#1CE5A2\" completed={95} />\r\n                        </div>\r\n\r\n                        <div className=\"bars-area\">\r\n                            <p className=\"bar-title\">Best practice media</p>\r\n                            <p className=\"bar-rate\">40 %</p>\r\n                            <ProgressBar height=\"7px\" borderRadius=\"0\" bgcolor=\"#E4002B\" completed={40} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <button className=\"close-product-pop-up-btn\" onClick={this.closePopUp} ><CloseIcon /></button>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\productsTypeModel.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\auth-for-watching-only\\auth-for-watching-only.tsx",["227","228","229","230"],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\models\\userModel.ts",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\restore-state-pop-up\\restore-state-pop-up.tsx",[],"C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\reports-history-pop-up\\reports-history-pop-up.tsx",["231","232","233","234","235"],"import React, { Component } from \"react\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./reports-history-pop-up.css\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ReportModel } from \"../../models/reportModel\";\r\nimport axios from \"axios\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport { Config } from \"../../config\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\n\r\ninterface ReportsHistoryPopUpState {\r\n    reports: ReportModel[]\r\n}\r\n\r\nexport class ReportsHistoryPopUp extends Component<any, ReportsHistoryPopUpState>{\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            reports: []\r\n        }\r\n    }\r\n\r\n    public async componentDidMount() {\r\n        try {\r\n            const user = store.getState().user;\r\n            const response = await axios.get(\"http://factory-dev.landing-page-media.co.il/reports-by-user/?userId=\" + user.userId);\r\n            const reportsStr = response.data;\r\n            if (typeof (reportsStr) === 'object') {\r\n                const reports: ReportModel[] = [];\r\n                reports.push(reportsStr);\r\n                this.setState({ reports });\r\n            }\r\n            else {\r\n                const fixedJson = \"[\" + reportsStr.replace(/}{/g, \"},{\") + \"]\";\r\n                const reports: ReportModel[] = JSON.parse(fixedJson);\r\n                this.setState({ reports });\r\n            }\r\n        }\r\n        catch (err) {\r\n            console.log(err.message);\r\n        }\r\n    }\r\n\r\n    public openLinkPopUp = (report: ReportModel) => (event: any) => {\r\n        store.dispatch({type: ActionType.changeDisplayForReportsPopUp});\r\n        store.dispatch({type: ActionType.changeDisplayForReportsLinkPopUp});\r\n        store.dispatch({type: ActionType.getReportToCopy, payLoad: report});\r\n    }\r\n\r\n    public watchReport = (report: ReportModel) => async (event: any) => {\r\n        store.dispatch({ type: ActionType.updateSelectedClients, payLoad: report.clients });\r\n        store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: report.campaigns });\r\n        store.dispatch({ type: ActionType.getSelectedProducts, payLoad: report.products });\r\n        store.dispatch({ type: ActionType.getDatesRanges, payLoad: report.datesOnReport });\r\n\r\n        const response = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-campaigns/\");\r\n        const allCampaigns: CampaignModel[] = response.data.campaigns;\r\n\r\n        if (report.campaigns?.length === 0) {\r\n            const selectedCampaigns: CampaignModel[] = [];\r\n            report.clients?.map(client => {\r\n                allCampaigns.map(campaign => {\r\n                    if (campaign.clientId === client.clientId) {\r\n                        selectedCampaigns.push(campaign);\r\n                    }\r\n                })\r\n            })\r\n            store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: selectedCampaigns });\r\n        }\r\n\r\n\r\n        if (report.products?.length === 0) {\r\n            const responseForProducts = await axios.get(\"http://factory-dev.landing-page-media.co.il/all-products\");\r\n            const allProductsFromDb: ProductModel[] = responseForProducts.data.products;\r\n            const selectedCampaigns: CampaignModel[] = store.getState().selectedCampaigns;\r\n\r\n            const selectedProducts: ProductModel[] = [];\r\n            selectedCampaigns.map(campaign => {\r\n                allProductsFromDb.map(product => {\r\n                    if (product.campaignId === campaign.campaignId) {\r\n                        selectedProducts.push(product);\r\n\r\n                    }\r\n                })\r\n            });\r\n\r\n            store.dispatch({ type: ActionType.getSelectedProducts, payLoad: selectedProducts });\r\n        }\r\n        store.dispatch({ type: ActionType.changeDisplayForReportsPopUp });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"full-screen-link-conatiner\">\r\n                <div className=\"small-reports-conatiner\">\r\n                    <button className=\"close-reports-pop-up-btn\"\r\n                        onClick={() => store.dispatch({ type: ActionType.changeDisplayForReportsPopUp })} >\r\n                        <CloseIcon />\r\n                    </button>\r\n                    <h2>היסטוריית הדוחות שלי</h2>\r\n                    <table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th className=\"name-th\">שם הדו\"ח</th>\r\n                                <th className=\"dates-th\">תאריכים</th>\r\n                                <th className=\"watch-th\">צפייה</th>\r\n                                <th className=\"link-th\"> קישור</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.reports.length !== 0 && this.state.reports.map(r =>\r\n                                <tr className=\"white\">\r\n                                    <td>{r.reportName}</td>\r\n                                    <td>{r.datesOnReport}</td>\r\n                                    <td>\r\n                                        <IconButton onClick={this.watchReport(r)}>\r\n                                            <VisibilityIcon style={{ fontSize: 25 }} />\r\n                                        </IconButton>\r\n                                    </td>\r\n                                    <td>\r\n                                        <IconButton onClick={this.openLinkPopUp(r as ReportModel)}>\r\n                                            <LinkIcon style={{ fontSize: 25 }} />\r\n                                        </IconButton>\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\USER\\Desktop\\factory\\factory\\src\\components\\link-pop-up-from-report\\link-pop-up-from-report.tsx",["236","237","238","239"],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":8,"column":8,"nodeType":"246","messageId":"247","endLine":8,"endColumn":13},{"ruleId":"244","severity":1,"message":"248","line":2,"column":10,"nodeType":"246","messageId":"247","endLine":2,"endColumn":21},{"ruleId":"244","severity":1,"message":"249","line":8,"column":10,"nodeType":"246","messageId":"247","endLine":8,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":237,"column":11,"nodeType":"252","endLine":237,"endColumn":78},{"ruleId":"250","severity":1,"message":"251","line":246,"column":73,"nodeType":"252","endLine":246,"endColumn":121},{"ruleId":"244","severity":1,"message":"253","line":9,"column":10,"nodeType":"246","messageId":"247","endLine":9,"endColumn":19},{"ruleId":"244","severity":1,"message":"254","line":10,"column":10,"nodeType":"246","messageId":"247","endLine":10,"endColumn":20},{"ruleId":"244","severity":1,"message":"255","line":4,"column":10,"nodeType":"246","messageId":"247","endLine":4,"endColumn":23},{"ruleId":"244","severity":1,"message":"256","line":6,"column":10,"nodeType":"246","messageId":"247","endLine":6,"endColumn":25},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"257","line":1,"column":28,"nodeType":"246","messageId":"247","endLine":1,"endColumn":34},{"ruleId":"244","severity":1,"message":"258","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":20},{"ruleId":"250","severity":1,"message":"251","line":119,"column":17,"nodeType":"252","endLine":119,"endColumn":172},{"ruleId":"250","severity":1,"message":"251","line":121,"column":21,"nodeType":"252","endLine":121,"endColumn":173},{"ruleId":"250","severity":1,"message":"251","line":130,"column":17,"nodeType":"252","endLine":130,"endColumn":80},{"ruleId":"244","severity":1,"message":"259","line":4,"column":10,"nodeType":"246","messageId":"247","endLine":4,"endColumn":23},{"ruleId":"260","severity":1,"message":"261","line":76,"column":44,"nodeType":"262","messageId":"263","endLine":76,"endColumn":46},{"ruleId":"260","severity":1,"message":"264","line":80,"column":17,"nodeType":"265","messageId":"266","endLine":80,"endColumn":24},{"ruleId":"250","severity":1,"message":"251","line":126,"column":25,"nodeType":"252","endLine":126,"endColumn":104},{"ruleId":"250","severity":1,"message":"251","line":150,"column":25,"nodeType":"252","endLine":150,"endColumn":96},{"ruleId":"244","severity":1,"message":"267","line":1,"column":10,"nodeType":"246","messageId":"247","endLine":1,"endColumn":14},{"ruleId":"244","severity":1,"message":"259","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":23},{"ruleId":"244","severity":1,"message":"268","line":10,"column":10,"nodeType":"246","messageId":"247","endLine":10,"endColumn":25},{"ruleId":"244","severity":1,"message":"269","line":11,"column":10,"nodeType":"246","messageId":"247","endLine":11,"endColumn":24},{"ruleId":"244","severity":1,"message":"270","line":13,"column":10,"nodeType":"246","messageId":"247","endLine":13,"endColumn":26},{"ruleId":"244","severity":1,"message":"271","line":15,"column":10,"nodeType":"246","messageId":"247","endLine":15,"endColumn":17},{"ruleId":"260","severity":1,"message":"264","line":92,"column":59,"nodeType":"262","messageId":"272","endLine":92,"endColumn":61},{"ruleId":"260","severity":1,"message":"264","line":93,"column":51,"nodeType":"262","messageId":"272","endLine":93,"endColumn":53},{"ruleId":"260","severity":1,"message":"264","line":109,"column":52,"nodeType":"262","messageId":"272","endLine":109,"endColumn":54},{"ruleId":"260","severity":1,"message":"264","line":110,"column":55,"nodeType":"262","messageId":"272","endLine":110,"endColumn":57},{"ruleId":"250","severity":1,"message":"251","line":195,"column":17,"nodeType":"252","endLine":195,"endColumn":139},{"ruleId":"250","severity":1,"message":"251","line":198,"column":21,"nodeType":"252","endLine":198,"endColumn":113},{"ruleId":"250","severity":1,"message":"251","line":215,"column":37,"nodeType":"252","endLine":215,"endColumn":157},{"ruleId":"250","severity":1,"message":"251","line":229,"column":37,"nodeType":"252","endLine":229,"endColumn":157},{"ruleId":"250","severity":1,"message":"251","line":251,"column":37,"nodeType":"252","endLine":251,"endColumn":157},{"ruleId":"250","severity":1,"message":"251","line":265,"column":37,"nodeType":"252","endLine":265,"endColumn":157},{"ruleId":"250","severity":1,"message":"251","line":280,"column":17,"nodeType":"252","endLine":280,"endColumn":202},{"ruleId":"244","severity":1,"message":"257","line":1,"column":28,"nodeType":"246","messageId":"247","endLine":1,"endColumn":34},{"ruleId":"244","severity":1,"message":"273","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":22},{"ruleId":"244","severity":1,"message":"258","line":11,"column":10,"nodeType":"246","messageId":"247","endLine":11,"endColumn":20},{"ruleId":"250","severity":1,"message":"251","line":224,"column":21,"nodeType":"252","endLine":224,"endColumn":94},{"ruleId":"244","severity":1,"message":"270","line":9,"column":10,"nodeType":"246","messageId":"247","endLine":9,"endColumn":26},{"ruleId":"244","severity":1,"message":"269","line":10,"column":10,"nodeType":"246","messageId":"247","endLine":10,"endColumn":24},{"ruleId":"244","severity":1,"message":"274","line":11,"column":10,"nodeType":"246","messageId":"247","endLine":11,"endColumn":19},{"ruleId":"244","severity":1,"message":"275","line":12,"column":10,"nodeType":"246","messageId":"247","endLine":12,"endColumn":24},{"ruleId":"244","severity":1,"message":"276","line":13,"column":10,"nodeType":"246","messageId":"247","endLine":13,"endColumn":21},{"ruleId":"260","severity":1,"message":"264","line":87,"column":37,"nodeType":"262","messageId":"272","endLine":87,"endColumn":39},{"ruleId":"260","severity":1,"message":"264","line":93,"column":36,"nodeType":"262","messageId":"272","endLine":93,"endColumn":38},{"ruleId":"260","severity":1,"message":"264","line":95,"column":46,"nodeType":"262","messageId":"272","endLine":95,"endColumn":48},{"ruleId":"277","severity":1,"message":"278","line":155,"column":83,"nodeType":"279","messageId":"280","endLine":155,"endColumn":84,"fix":"281"},{"ruleId":"244","severity":1,"message":"282","line":166,"column":15,"nodeType":"246","messageId":"247","endLine":166,"endColumn":44},{"ruleId":"244","severity":1,"message":"283","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":16},{"ruleId":"260","severity":1,"message":"264","line":104,"column":48,"nodeType":"262","messageId":"272","endLine":104,"endColumn":50},{"ruleId":"244","severity":1,"message":"257","line":1,"column":28,"nodeType":"246","messageId":"247","endLine":1,"endColumn":34},{"ruleId":"244","severity":1,"message":"271","line":2,"column":10,"nodeType":"246","messageId":"247","endLine":2,"endColumn":17},{"ruleId":"244","severity":1,"message":"258","line":10,"column":10,"nodeType":"246","messageId":"247","endLine":10,"endColumn":20},{"ruleId":"250","severity":1,"message":"251","line":162,"column":17,"nodeType":"252","endLine":162,"endColumn":90},{"ruleId":"244","severity":1,"message":"284","line":4,"column":10,"nodeType":"246","messageId":"247","endLine":4,"endColumn":13},{"ruleId":"244","severity":1,"message":"285","line":1,"column":10,"nodeType":"246","messageId":"247","endLine":1,"endColumn":15},{"ruleId":"244","severity":1,"message":"286","line":2,"column":10,"nodeType":"246","messageId":"247","endLine":2,"endColumn":18},{"ruleId":"244","severity":1,"message":"287","line":3,"column":10,"nodeType":"246","messageId":"247","endLine":3,"endColumn":16},{"ruleId":"244","severity":1,"message":"288","line":1,"column":10,"nodeType":"246","messageId":"247","endLine":1,"endColumn":22},{"ruleId":"240","replacedBy":"289"},{"ruleId":"242","replacedBy":"290"},{"ruleId":"244","severity":1,"message":"259","line":6,"column":10,"nodeType":"246","messageId":"247","endLine":6,"endColumn":23},{"ruleId":"244","severity":1,"message":"268","line":8,"column":10,"nodeType":"246","messageId":"247","endLine":8,"endColumn":25},{"ruleId":"244","severity":1,"message":"269","line":9,"column":10,"nodeType":"246","messageId":"247","endLine":9,"endColumn":24},{"ruleId":"260","severity":1,"message":"264","line":44,"column":35,"nodeType":"262","messageId":"272","endLine":44,"endColumn":37},{"ruleId":"260","severity":1,"message":"264","line":100,"column":48,"nodeType":"262","messageId":"272","endLine":100,"endColumn":50},{"ruleId":"260","severity":1,"message":"264","line":101,"column":47,"nodeType":"262","messageId":"272","endLine":101,"endColumn":49},{"ruleId":"260","severity":1,"message":"264","line":114,"column":48,"nodeType":"262","messageId":"272","endLine":114,"endColumn":50},{"ruleId":"260","severity":1,"message":"264","line":115,"column":41,"nodeType":"262","messageId":"272","endLine":115,"endColumn":43},{"ruleId":"244","severity":1,"message":"270","line":8,"column":10,"nodeType":"246","messageId":"247","endLine":8,"endColumn":26},{"ruleId":"260","severity":1,"message":"264","line":52,"column":52,"nodeType":"262","messageId":"272","endLine":52,"endColumn":54},{"ruleId":"250","severity":1,"message":"251","line":80,"column":33,"nodeType":"252","endLine":80,"endColumn":72},{"ruleId":"244","severity":1,"message":"248","line":2,"column":10,"nodeType":"246","messageId":"247","endLine":2,"endColumn":21},{"ruleId":"244","severity":1,"message":"249","line":8,"column":10,"nodeType":"246","messageId":"247","endLine":8,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":181,"column":11,"nodeType":"252","endLine":181,"endColumn":78},{"ruleId":"250","severity":1,"message":"251","line":190,"column":73,"nodeType":"252","endLine":190,"endColumn":121},{"ruleId":"244","severity":1,"message":"291","line":11,"column":10,"nodeType":"246","messageId":"247","endLine":11,"endColumn":16},{"ruleId":"260","severity":1,"message":"264","line":66,"column":40,"nodeType":"262","messageId":"272","endLine":66,"endColumn":42},{"ruleId":"260","severity":1,"message":"264","line":67,"column":43,"nodeType":"262","messageId":"272","endLine":67,"endColumn":45},{"ruleId":"260","severity":1,"message":"264","line":83,"column":44,"nodeType":"262","messageId":"272","endLine":83,"endColumn":46},{"ruleId":"260","severity":1,"message":"264","line":84,"column":47,"nodeType":"262","messageId":"272","endLine":84,"endColumn":49},{"ruleId":"244","severity":1,"message":"292","line":1,"column":17,"nodeType":"246","messageId":"247","endLine":1,"endColumn":28},{"ruleId":"244","severity":1,"message":"283","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":16},{"ruleId":"244","severity":1,"message":"245","line":9,"column":8,"nodeType":"246","messageId":"247","endLine":9,"endColumn":13},{"ruleId":"244","severity":1,"message":"293","line":11,"column":10,"nodeType":"246","messageId":"247","endLine":11,"endColumn":21},"no-native-reassign",["294"],"no-negated-in-lhs",["295"],"@typescript-eslint/no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'Unsubscribe' is defined but never used.","'rejects' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'UserModel' is defined but never used.","'ActionType' is defined but never used.","'getAllReports' is defined but never used.","'TopCampaignsNav' is defined but never used.","'useRef' is defined but never used.","'AllClients' is defined but never used.","'getAllClients' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'exec' is defined but never used.","'getAllCampaigns' is defined but never used.","'getAllProducts' is defined but never used.","'getProductsTypes' is defined but never used.","'NavLink' is defined but never used.","expectedInside","'ProductsType' is defined but never used.","'LinkPopUp' is defined but never used.","'AddClientPopUp' is defined but never used.","'ReportModel' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"296","text":"297"},"'allCampaigns' is assigned a value but never used.","'config' is defined but never used.","'act' is defined but never used.","'Store' is defined but never used.","'AppState' is defined but never used.","'Action' is defined but never used.","'ProductModel' is defined but never used.",["294"],["295"],"'Config' is defined but never used.","'ChangeEvent' is defined but never used.","'ClientModel' is defined but never used.","no-global-assign","no-unsafe-negation",[6586,6605],"\r\n                ."]