[{"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\index.tsx":"1","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\reportWebVitals.ts":"2","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\layout\\layout.tsx":"3","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\home\\home.tsx":"4","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\data\\clients.ts":"5","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\all-clients\\all-clients.tsx":"6","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\store.js":"7","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\reducer.ts":"8","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\appState.ts":"9","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\actionType.ts":"10","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\report-maker\\report-maker.tsx":"11","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx":"12","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx":"13","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\campaigns\\campaigns.tsx":"14","C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx":"15"},{"size":333,"mtime":1610284375185,"results":"16","hashOfConfig":"17"},{"size":440,"mtime":1610214539392,"results":"18","hashOfConfig":"17"},{"size":758,"mtime":1610356947393,"results":"19","hashOfConfig":"17"},{"size":996,"mtime":1610357678082,"results":"20","hashOfConfig":"17"},{"size":221526,"mtime":1610374720706,"results":"21","hashOfConfig":"17"},{"size":5980,"mtime":1610380656043,"results":"22","hashOfConfig":"17"},{"size":179,"mtime":1610263798482,"results":"23","hashOfConfig":"17"},{"size":947,"mtime":1610355349341,"results":"24","hashOfConfig":"17"},{"size":255,"mtime":1610281647505,"results":"25","hashOfConfig":"17"},{"size":133,"mtime":1610355285573,"results":"26","hashOfConfig":"17"},{"size":1356,"mtime":1610380590131,"results":"27","hashOfConfig":"17"},{"size":5024,"mtime":1610380684058,"results":"28","hashOfConfig":"17"},{"size":5193,"mtime":1610380106563,"results":"29","hashOfConfig":"17"},{"size":3070,"mtime":1610375507855,"results":"30","hashOfConfig":"17"},{"size":4747,"mtime":1610380523795,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4aq9o0",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\index.tsx",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\reportWebVitals.ts",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\layout\\layout.tsx",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\home\\home.tsx",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\data\\clients.ts",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\all-clients\\all-clients.tsx",["65","66","67","68","69","70","71"],"import React, { Component } from \"react\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport \"./all-clients.css\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { Unsubscribe } from \"redux\";\r\n\r\n\r\ninterface AllClientsState {\r\n    allClients: ClientModel[],\r\n    companies: string[],\r\n    isPopUpShow: boolean,\r\n    clientsToShow: ClientModel[],\r\n    selectedClients: ClientModel[]\r\n}\r\n\r\nexport class AllClients extends Component<any, AllClientsState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            allClients: [],\r\n            companies: [],\r\n            isPopUpShow: false,\r\n            clientsToShow: [],\r\n            selectedClients: store.getState().selectedClients\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            this.setState({ selectedClients });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const allClients: ClientModel[] = getAllClients();\r\n        this.setState({ allClients });\r\n        this.setState({ clientsToShow: allClients });\r\n\r\n        const companies: string[] = [];\r\n        companies.push(allClients[0].company as string);\r\n        companies.map(company => {\r\n            allClients.map(client => {\r\n                if (client.company !== company) {\r\n                    companies.push(client.company as string);\r\n                }\r\n            })\r\n        })\r\n\r\n        this.setState({ companies });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n\r\n\r\n    public selectClient = (client: ClientModel) => (event: any) => {\r\n        const selectedClients: ClientModel[] = store.getState().selectedClients;\r\n        let isUnique: boolean = true;\r\n        selectedClients.map(selectedClient => {\r\n            if (selectedClient.clientId === client.clientId) {\r\n                isUnique = false;\r\n            }\r\n        })\r\n        if (isUnique) {\r\n            let selectedClients = [...this.state.selectedClients];\r\n            selectedClients.push(client);\r\n            this.setState({ selectedClients });\r\n            store.dispatch({ type: ActionType.addClientToSelectedClients, payLoad: client });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public filterByCompany = (companyName: string) => (event: any) => {\r\n\r\n        if (companyName === \"הכל\") {\r\n            const allClients = [...this.state.allClients];\r\n            this.setState({ clientsToShow: allClients });\r\n            return;\r\n        }\r\n\r\n        const clientsToShow = this.state.allClients.filter(c => c.company === companyName);\r\n        this.setState({ clientsToShow });\r\n    }\r\n\r\n    public filterAlphabetically = () => {\r\n        const clientsByAlphabetically = this.state.allClients.map(c => c.clientName).sort();\r\n        let clientsToShow: ClientModel[] = [];\r\n        for (let i = 0; i <= clientsByAlphabetically.length; i++) {\r\n            for (const client of this.state.allClients) {\r\n                if (client.clientName === clientsByAlphabetically[i]) {\r\n                    clientsToShow.push(client);\r\n                }\r\n            }\r\n        }\r\n        this.setState({ clientsToShow });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"all-clients\">\r\n\r\n\r\n                <div className=\"filter-area\">\r\n                    <div className=\"left-filter\">\r\n                        <img className=\"filter-by-date-img\" src=\"/assets/images/filter_by_date.svg\" />\r\n                        <span className=\"filter-by-new\">Latest</span>\r\n                        <span className=\"separate\">|</span>\r\n                        <span className=\"filter-by-name\" onClick={this.filterAlphabetically}>A <span className=\"inside-filter\">to</span> Z</span>\r\n                    </div>\r\n\r\n\r\n                    <span onMouseEnter={() => this.setState({ isPopUpShow: true })}\r\n                        onMouseLeave={() => this.setState({ isPopUpShow: false })}\r\n                        className=\"filter-by-company\">דוח לפי חברה</span>\r\n\r\n                </div>\r\n\r\n                {this.state.clientsToShow.map(client =>\r\n                    <div className=\"client\">\r\n                        <img src={client.clientImageSrc} />\r\n                        <div className=\"client-info\">\r\n\r\n                            <img src=\"/assets/images/add_button_before.svg\"\r\n                                style={{ display: this.state.selectedClients.filter(c => c.clientId === client.clientId).length === 0 ? \"inline-block\" : \"none\" }}\r\n                                className=\"add-client-btn btn-before\" onClick={this.selectClient(client)} />\r\n                            <img src=\"/assets/images/add_button_after.svg\"\r\n                                style={{ display: this.state.selectedClients.filter(c => c.clientId === client.clientId).length === 0 ? \"none\" : \"inline-block\" }}\r\n                                className=\"add-client-btn btn-after\" onClick={this.selectClient(client)} />\r\n                            <span>{client.clientName}</span>\r\n                        </div>\r\n                    </div>)}\r\n\r\n                <div style={{ display: this.state.isPopUpShow ? \"block\" : \"none\" }} className=\"company-filter-pop-up-menu\"\r\n                    onMouseEnter={() => this.setState({ isPopUpShow: true })}\r\n                    onMouseLeave={() => this.setState({ isPopUpShow: false })}>\r\n                    <span onClick={this.filterByCompany(\"הכל\")} className=\"company-name\">כל הלקוחות</span>\r\n                    {this.state.companies.map(company =>\r\n                        <span onClick={this.filterByCompany(company as string)} className=\"company-name\">לקוחות {company}</span>)}\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}",["72","73"],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\store.js",[],["74","75"],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\reducer.ts",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\appState.ts",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\redux\\actionType.ts",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\report-maker\\report-maker.tsx",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx",["76","77","78","79","80"],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx",[],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\campaigns\\campaigns.tsx",["81","82","83"],"C:\\Users\\USER\\Documents\\GitHub\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx",["84","85","86"],{"ruleId":"87","severity":1,"message":"88","line":46,"column":31,"nodeType":"89","messageId":"90","endLine":46,"endColumn":33},{"ruleId":"87","severity":1,"message":"88","line":47,"column":35,"nodeType":"89","messageId":"90","endLine":47,"endColumn":37},{"ruleId":"87","severity":1,"message":"88","line":66,"column":44,"nodeType":"89","messageId":"90","endLine":66,"endColumn":46},{"ruleId":"91","severity":1,"message":"92","line":113,"column":25,"nodeType":"93","endLine":113,"endColumn":103},{"ruleId":"91","severity":1,"message":"92","line":128,"column":25,"nodeType":"93","endLine":128,"endColumn":60},{"ruleId":"91","severity":1,"message":"92","line":131,"column":29,"nodeType":"93","endLine":133,"endColumn":109},{"ruleId":"91","severity":1,"message":"92","line":134,"column":29,"nodeType":"93","endLine":136,"endColumn":108},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":28,"nodeType":"100","messageId":"101","endLine":1,"endColumn":34},{"ruleId":"98","severity":1,"message":"102","line":7,"column":10,"nodeType":"100","messageId":"101","endLine":7,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":114,"column":17,"nodeType":"93","endLine":114,"endColumn":171},{"ruleId":"91","severity":1,"message":"92","line":116,"column":21,"nodeType":"93","endLine":116,"endColumn":172},{"ruleId":"91","severity":1,"message":"92","line":122,"column":17,"nodeType":"93","endLine":122,"endColumn":79},{"ruleId":"98","severity":1,"message":"103","line":1,"column":10,"nodeType":"100","messageId":"101","endLine":1,"endColumn":14},{"ruleId":"91","severity":1,"message":"92","line":51,"column":21,"nodeType":"93","endLine":51,"endColumn":112},{"ruleId":"91","severity":1,"message":"92","line":64,"column":41,"nodeType":"93","endLine":64,"endColumn":96},{"ruleId":"98","severity":1,"message":"99","line":1,"column":28,"nodeType":"100","messageId":"101","endLine":1,"endColumn":34},{"ruleId":"98","severity":1,"message":"102","line":7,"column":10,"nodeType":"100","messageId":"101","endLine":7,"endColumn":20},{"ruleId":"91","severity":1,"message":"92","line":121,"column":21,"nodeType":"93","endLine":121,"endColumn":93},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["104"],"no-negated-in-lhs",["105"],"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'AllClients' is defined but never used.","'exec' is defined but never used.","no-global-assign","no-unsafe-negation"]