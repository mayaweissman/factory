[{"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\index.tsx":"1","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\reportWebVitals.ts":"2","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\layout\\layout.tsx":"3","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\home\\home.tsx":"4","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\report-maker\\report-maker.tsx":"5","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\all-clients\\all-clients.tsx":"6","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx":"7","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\campaigns\\campaigns.tsx":"8","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx":"9","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx":"10","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\store.js":"11","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\actionType.ts":"12","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\clients.ts":"13","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\reducer.ts":"14","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\appState.ts":"15","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\campaigns.ts":"16","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products.ts":"17","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products-types.ts":"18","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\add-client-pop-up\\add-client-pop-up.tsx":"19"},{"size":333,"mtime":1610434431335,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1610434431338,"results":"22","hashOfConfig":"21"},{"size":758,"mtime":1610434431320,"results":"23","hashOfConfig":"21"},{"size":996,"mtime":1610434431319,"results":"24","hashOfConfig":"21"},{"size":1509,"mtime":1610434431321,"results":"25","hashOfConfig":"21"},{"size":5959,"mtime":1610441735627,"results":"26","hashOfConfig":"21"},{"size":5120,"mtime":1610434431323,"results":"27","hashOfConfig":"21"},{"size":9099,"mtime":1610446728646,"results":"28","hashOfConfig":"21"},{"size":5886,"mtime":1610465325257,"results":"29","hashOfConfig":"21"},{"size":5281,"mtime":1610465179808,"results":"30","hashOfConfig":"21"},{"size":179,"mtime":1610434431338,"results":"31","hashOfConfig":"21"},{"size":428,"mtime":1610465011685,"results":"32","hashOfConfig":"21"},{"size":46459,"mtime":1610440777997,"results":"33","hashOfConfig":"21"},{"size":2631,"mtime":1610465066935,"results":"34","hashOfConfig":"21"},{"size":889,"mtime":1610458402225,"results":"35","hashOfConfig":"21"},{"size":1404,"mtime":1610443039564,"results":"36","hashOfConfig":"21"},{"size":261423,"mtime":1610451346814,"results":"37","hashOfConfig":"21"},{"size":969,"mtime":1610446351855,"results":"38","hashOfConfig":"21"},{"size":8166,"mtime":1610462613368,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"z5uj72",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\index.tsx",[],["85","86"],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\reportWebVitals.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\layout\\layout.tsx",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\home\\home.tsx",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\report-maker\\report-maker.tsx",["87","88","89"],"import React, { Component } from \"react\";\r\nimport { Campaigns } from \"../campaigns/campaigns\";\r\nimport { FilteringSideMenu } from \"../filtering-side-menu/filtering-side-menu\";\r\nimport { TopCampaignsNav } from \"../top-campaigns-nav/top-campaigns-nav\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport \"./report-maker.css\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\n\r\ninterface ReportMakerState {\r\n    isScroll: boolean\r\n}\r\n\r\nexport class ReportMaker extends Component<any, ReportMakerState>{\r\n\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            isScroll: false\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n\r\n        window.addEventListener('scroll', (e) => {\r\n            const YPosition = window.pageYOffset;\r\n            if (YPosition === 0) {\r\n                this.setState({ isScroll: false });\r\n            }\r\n            else {\r\n                this.setState({ isScroll: true });\r\n            }\r\n        });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"report-maker\">\r\n                <main>\r\n                    <div className=\"header\">\r\n                        <TopCampaignsNav isScroll={this.state.isScroll} />\r\n                    </div>\r\n                    <Campaigns />\r\n                </main>\r\n\r\n                <aside>\r\n                    <FilteringSideMenu />\r\n                </aside>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\all-clients\\all-clients.tsx",["90","91","92","93","94"],"import React, { Component } from \"react\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport \"./all-clients.css\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { Unsubscribe } from \"redux\";\r\n\r\n\r\ninterface AllClientsState {\r\n    allClients: ClientModel[],\r\n    companies: string[],\r\n    isPopUpShow: boolean,\r\n    clientsToShow: ClientModel[],\r\n    selectedClients: ClientModel[]\r\n}\r\n\r\nexport class AllClients extends Component<any, AllClientsState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            allClients: [],\r\n            companies: [],\r\n            isPopUpShow: false,\r\n            clientsToShow: [],\r\n            selectedClients: store.getState().selectedClients\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            this.setState({ selectedClients });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const allClients: ClientModel[] = getAllClients();\r\n        this.setState({ allClients });\r\n        this.setState({ clientsToShow: allClients });\r\n\r\n        store.dispatch({ type: ActionType.getAllClients, payLoad: allClients });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n\r\n\r\n    public selectClient = (client: ClientModel) => (event: any) => {\r\n        const selectedClients: ClientModel[] = store.getState().selectedClients;\r\n        let isUnique: boolean = true;\r\n        selectedClients.map(selectedClient => {\r\n            if (selectedClient.clientId === client.clientId) {\r\n                isUnique = false;\r\n            }\r\n        })\r\n        if (isUnique) {\r\n            let selectedClients = [...this.state.selectedClients];\r\n            selectedClients.push(client);\r\n            this.setState({ selectedClients });\r\n            store.dispatch({ type: ActionType.addClientToSelectedClients, payLoad: client });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    public filterByCompany = (companyName: string) => (event: any) => {\r\n\r\n        if (companyName === \"הכל\") {\r\n            const allClients = [...this.state.allClients];\r\n            this.setState({ clientsToShow: allClients });\r\n            return;\r\n        }\r\n\r\n        const clientsToShow = this.state.allClients.filter(c => c.company === companyName);\r\n        this.setState({ clientsToShow });\r\n    }\r\n\r\n    public filterAlphabetically = () => {\r\n        const clientsByAlphabetically = this.state.allClients.map(c => c.clientName).sort();\r\n        let clientsToShow: ClientModel[] = [];\r\n        for (let i = 0; i <= clientsByAlphabetically.length; i++) {\r\n            for (const client of this.state.allClients) {\r\n                if (client.clientName === clientsByAlphabetically[i]) {\r\n                    clientsToShow.push(client);\r\n                }\r\n            }\r\n        }\r\n        this.setState({ clientsToShow });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"all-clients\">\r\n\r\n\r\n                <div className=\"filter-area\">\r\n                    <div className=\"left-filter\">\r\n                        <img className=\"filter-by-date-img\" src=\"/assets/images/filter_by_date.svg\" />\r\n                        <span className=\"filter-by-new\">Latest</span>\r\n                        <span className=\"separate\">|</span>\r\n                        <span className=\"filter-by-name\" onClick={this.filterAlphabetically}>A <span className=\"inside-filter\">to</span> Z</span>\r\n                    </div>\r\n\r\n\r\n                    <span onMouseEnter={() => this.setState({ isPopUpShow: true })}\r\n                        onMouseLeave={() => this.setState({ isPopUpShow: false })}\r\n                        className=\"filter-by-company\">דוח לפי חברה</span>\r\n\r\n                </div>\r\n\r\n                {this.state.clientsToShow.map(client =>\r\n                    <div className=\"client\">\r\n                        <img src={client.clientImageSrc} />\r\n                        <div className=\"client-info\">\r\n\r\n                            <img src=\"/assets/images/add_button_before.svg\"\r\n                                style={{ display: this.state.selectedClients.filter(c => c.clientId === client.clientId).length === 0 ? \"inline-block\" : \"none\" }}\r\n                                className=\"add-client-btn btn-before\" onClick={this.selectClient(client)} />\r\n                            <img src=\"/assets/images/add_button_after.svg\"\r\n                                style={{ display: this.state.selectedClients.filter(c => c.clientId === client.clientId).length === 0 ? \"none\" : \"inline-block\" }}\r\n                                className=\"add-client-btn btn-after\" onClick={this.selectClient(client)} />\r\n                            <span>{client.clientName}</span>\r\n                        </div>\r\n                    </div>)}\r\n\r\n                <div style={{ display: this.state.isPopUpShow ? \"block\" : \"none\" }} className=\"company-filter-pop-up-menu\"\r\n                    onMouseEnter={() => this.setState({ isPopUpShow: true })}\r\n                    onMouseLeave={() => this.setState({ isPopUpShow: false })}>\r\n                    <span onClick={this.filterByCompany(\"הכל\")} className=\"company-name\">כל הלקוחות</span>\r\n                    <span onClick={this.filterByCompany(\"Mccann\")} className=\"company-name\">לקוחות Mccann</span>\r\n                    <span onClick={this.filterByCompany(\"MRM\")} className=\"company-name\">לקוחות MRM</span>\r\n                    <span onClick={this.filterByCompany(\"Valley\")} className=\"company-name\">לקוחות Valley</span>\r\n                    <span onClick={this.filterByCompany(\"UMD\")} className=\"company-name\">לקוחות UMD</span>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx",["95","96","97","98","99"],"import React, { Component, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport { AllClients } from \"../all-clients/all-clients\";\r\nimport \"./top-clients-nav.css\";\r\n\r\ninterface TopClientsNavProps {\r\n    isScroll: boolean\r\n}\r\n\r\ninterface TopClientsNavState {\r\n    selectedClients: ClientModel[],\r\n    isButtonsScrolled: boolean,\r\n}\r\n\r\nexport class TopClientsNav extends Component<TopClientsNavProps, TopClientsNavState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    public buttonsRef = React.createRef<HTMLDivElement>();\r\n    public topNavRef = React.createRef<HTMLDivElement>();\r\n\r\n\r\n    public constructor(props: TopClientsNavProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            isButtonsScrolled: false\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            this.setState({ selectedClients });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n        const maxWidth = topNavWidth / 100 * 60;\r\n\r\n        window.addEventListener(\"click\", () => {\r\n            const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n            if (buttonsWidth > maxWidth) {\r\n                this.setState({ isButtonsScrolled: true });\r\n            }\r\n            else{\r\n                this.setState({ isButtonsScrolled: false });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public scrollToRight = () => {\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public scrollToLeft = () => {\r\n        const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: -buttonsWidth,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public removeAllClients = () => {\r\n        this.setState({ selectedClients: [] })\r\n        store.dispatch({ type: ActionType.unselectAllClients });\r\n    }\r\n\r\n    public removeClient = (clientId: number) => (event: any) => {\r\n        const selectedClients = [...this.state.selectedClients];\r\n        const index = selectedClients.findIndex(c => c.clientId === clientId);\r\n        selectedClients.splice(index, 1);\r\n        this.setState({ selectedClients });\r\n\r\n        store.dispatch({ type: ActionType.removeClient, payLoad: clientId });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div ref={this.topNavRef} className=\"top-companies-nav\">\r\n                <button className=\"no-selected-button\" style={{ display: this.state.selectedClients.length === 0 ? \"block\" : \"none\" }}>\r\n                    +\r\n                </button>\r\n                <div ref={this.buttonsRef} className=\"buttons\">\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"start-of-buttons-section\" onMouseEnter={this.scrollToRight}></div>\r\n\r\n                    {this.state?.selectedClients.map(client =>\r\n                        <button className=\"client-btn\">\r\n                            <button className=\"remove-btn\" onClick={this.removeClient(client.clientId as number)}>\r\n                                <span>&#10006;</span>\r\n                            </button>\r\n                            <span className=\"inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"end-of-buttons-section\" onMouseEnter={this.scrollToLeft}>\r\n                        <span className=\"more-buttons-icon\">|</span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"top-scroll\" style={{ top: this.props.isScroll ? \"6vw\" : 0 }}></div>\r\n                <img src=\"/assets/images/pink_btn_before.svg\" className=\"next-btn-pink\" style={{ display: this.state.selectedClients.length === 0 ? \"block\" : \"none\" }} />\r\n                <NavLink onClick={() => console.log(store.getState().selectedClients)} to=\"/report-maker\" className=\"link-to-report-maker\" exact>\r\n                    <img src=\"/assets/images/pink_btn_after.svg\" className=\"next-btn-pink\" style={{ display: this.state.selectedClients.length > 0 ? \"block\" : \"none\" }} />\r\n                </NavLink>\r\n                <div className=\"other-buttons\">\r\n                    <span className=\"remove-all\" onClick={this.removeAllClients}>הסר הכל</span>\r\n                </div>\r\n\r\n                <img className=\"logo\" src=\"/assets/images/logo_factory.svg\" />\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\campaigns\\campaigns.tsx",["100","101","102","103","104","105","106","107","108","109","110"],"import { exec } from \"child_process\";\r\nimport React, { Component } from \"react\";\r\nimport \"./campaigns.css\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { getAllCampaigns } from \"../../data/campaigns\";\r\nimport { getAllProducts } from \"../../data/products\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { getProductsTypes } from \"../../data/products-types\";\r\n\r\ninterface ReportMakerState {\r\n    selectedClients: ClientModel[],\r\n    selectedCampaigns: CampaignModel[],\r\n    selectedProducts: ProductModel[]\r\n    productsToDisplay: ProductModel[],\r\n    campaignsToDisplay: CampaignModel[]\r\n}\r\n\r\n\r\n\r\n\r\nexport class Campaigns extends Component<any, ReportMakerState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            selectedCampaigns: store.getState().selectedCampaigns,\r\n            selectedProducts: store.getState().selectedProducts,\r\n            campaignsToDisplay: store.getState().campaignsToDisplay,\r\n            productsToDisplay: store.getState().campaignsToDisplay\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const selectedCampaigns = store.getState().selectedCampaigns;\r\n            const selectedProducts = store.getState().selectedProducts;\r\n            const campaignsToDisplay = store.getState().campaignsToDisplay;\r\n            const productsToDisplay = store.getState().productsToDisplay;\r\n            this.setState({ selectedClients });\r\n            this.setState({ selectedCampaigns });\r\n            this.setState({ selectedProducts });\r\n            this.setState({ campaignsToDisplay });\r\n            this.setState({ productsToDisplay });\r\n        })\r\n    }\r\n\r\n    public getProductTypeName = (productTypeId: number) => {\r\n        for(const type of getProductsTypes()){\r\n            if(type.productsTypeId === productTypeId){\r\n                return type.nameForSingle;\r\n            }\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const selectedCampaigns: CampaignModel[] = [];\r\n        this.state.selectedClients.map(client => {\r\n            getAllCampaigns().map(campaign => {\r\n                if (campaign.clientId === client.clientId) {\r\n                    selectedCampaigns.push(campaign);\r\n                }\r\n            })\r\n        })\r\n\r\n        this.setState({ selectedCampaigns });\r\n        store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: selectedCampaigns });\r\n\r\n        const selectedProducts: ProductModel[] = [];\r\n        selectedCampaigns.map(campaign => {\r\n            getAllProducts().map(product => {\r\n                if (product.campaignId === campaign.campaignId) {\r\n                    selectedProducts.push(product);\r\n\r\n                }\r\n            })\r\n        })\r\n        this.setState({ selectedProducts });\r\n        store.dispatch({ type: ActionType.getSelectedProducts, payLoad: selectedProducts });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public getSuccessRateColor = (successRate: number) => {\r\n        if (successRate <= 50) {\r\n            return \"#E4002B\";\r\n        }\r\n        else if (successRate > 50 && successRate < 80) {\r\n            return \"#FFDB48\";\r\n        }\r\n\r\n        else if (successRate >= 80) {\r\n            return \"#1CE5A2\";\r\n        }\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"campaigns\">\r\n\r\n                <div className=\"campaigns-left-filter\">\r\n                    <img className=\"campaigns-filter-by-success-img\" src=\"/assets/images/filter_by_date.svg\" />\r\n                    <span className=\"campaigns-filter-by-high\">Highest first</span>\r\n                    <span className=\"campaigns-separate\">|</span>\r\n                    <span className=\"campaigns-filter-by-low\">Lowest first</span>\r\n                </div>\r\n\r\n                {this.state.campaignsToDisplay.length !== 0 && this.state.campaignsToDisplay?.map(campaign =>\r\n                    <div className=\"client-in-campaigns\">\r\n                        <h2>{campaign.campaignName}</h2>\r\n                        <div className=\"grid\">\r\n                            {this.state.productsToDisplay.length === 0 && this.state.selectedProducts?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\">\r\n                                    <img className=\"campaign-img\" src={product.imageSrc} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                            {this.state.productsToDisplay.length !== 0 && this.state.productsToDisplay?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\">\r\n                                    <img className=\"campaign-img\" src={product.imageSrc} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {this.state.campaignsToDisplay.length === 0 && this.state.selectedCampaigns?.map(campaign =>\r\n                    <div className=\"client-in-campaigns\">\r\n                        <h2>{campaign.campaignName}</h2>\r\n                        <div className=\"grid\">\r\n                            {this.state.productsToDisplay.length === 0 && this.state.selectedProducts?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\">\r\n                                    <img className=\"campaign-img\" src={product.imageSrc} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                            {this.state.productsToDisplay.length !== 0 && this.state.productsToDisplay?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\">\r\n                                    <img className=\"campaign-img\" src={product.imageSrc} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx",["111","112","113"],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx",["114"],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\store.js",[],["115","116"],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\actionType.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\clients.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\reducer.ts",["117"],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\appState.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\campaigns.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products-types.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\add-client-pop-up\\add-client-pop-up.tsx",["118","119","120","121","122","123"],"import React, { Component } from \"react\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./add-client-pop-up.css\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { getAllCampaigns } from \"../../data/campaigns\";\r\nimport { getAllProducts } from \"../../data/products\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\n\r\ninterface AddClientPopUpState {\r\n    allClients: ClientModel[],\r\n    companies: string[],\r\n    clientsToAdd: ClientModel[]\r\n}\r\n\r\nexport class AddClientPopUp extends Component<any, AddClientPopUpState>{\r\n\r\n    private companies: string[] = [];\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            allClients: store.getState().allClients,\r\n            companies: [],\r\n            clientsToAdd: []\r\n        }\r\n    }\r\n\r\n    public closePopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForPopUp, payLoad: true });\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const allClients = getAllClients();\r\n        this.setState({ allClients });\r\n\r\n        let companies: string[] = [];\r\n        allClients.map(client => {\r\n            const duplicate = companies.find(c => c === client.company);\r\n            if (!duplicate) {\r\n                companies.push(client.company);\r\n            }\r\n        })\r\n        this.setState({ companies });\r\n    }\r\n\r\n    public stopPropagation = (e: any) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    public addClient = (client: ClientModel) => (event: any) => {\r\n        const clientsToAdd = [...this.state.clientsToAdd];\r\n        for (const c of clientsToAdd) {\r\n            if (c.clientId === client.clientId) {\r\n                const index = clientsToAdd.indexOf(c);\r\n                clientsToAdd.splice(index, 1);\r\n                this.setState({ clientsToAdd });\r\n                return;\r\n            }\r\n        }\r\n\r\n        clientsToAdd.push(client);\r\n        this.setState({ clientsToAdd });\r\n\r\n    }\r\n\r\n    public isSelcected = (clientId: number) => {\r\n        for (const c of this.state.clientsToAdd) {\r\n            if (c.clientId === clientId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public addClientsToReport = () => {\r\n        const selectedClients = store.getState().selectedClients;\r\n        for (const c of this.state.clientsToAdd) {\r\n            selectedClients.push(c);\r\n        }\r\n        store.dispatch({ type: ActionType.updateSelectedClients, payLoad: selectedClients });\r\n\r\n        const selectedCampaigns: CampaignModel[] = store.getState().selectedCampaigns;\r\n        this.state.clientsToAdd.map(client => {\r\n            getAllCampaigns().map(campaign => {\r\n                if (campaign.clientId === client.clientId) {\r\n                    selectedCampaigns.push(campaign);\r\n                }\r\n            })\r\n        })\r\n\r\n        store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: selectedCampaigns });\r\n\r\n        const selectedProducts: ProductModel[] = store.getState().selectedProducts;\r\n        this.state.clientsToAdd.map(client => {\r\n            getAllProducts().map(product => {\r\n                if (product.clientId === client.clientId) {\r\n                    selectedProducts.push(product);\r\n\r\n                }\r\n            })\r\n        })\r\n        store.dispatch({ type: ActionType.getSelectedProducts, payLoad: selectedProducts });\r\n\r\n        this.closePopUp();\r\n    }\r\n\r\n    public isExist = (clientId: number) => {\r\n        const selectedClients = [...store.getState().selectedClients];\r\n        for(const c of selectedClients){\r\n            if(c.clientId === clientId){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"full-screen-conatiner\" onClick={this.closePopUp} style={{ display: this.props.display }}>\r\n                <div className=\"small-conatiner\" onClick={this.stopPropagation}>\r\n                    <img className=\"close-pop-up-btn\" src=\"/assets/images/X.svg\" onClick={this.closePopUp} />\r\n                    <div className=\"clients-in-pop-up\">\r\n                        {this.state.companies?.map(company =>\r\n                            <div className=\"company\">\r\n                                <span className=\"company-name\">לקוחות {company}</span>\r\n                                <div className=\"client-in-pop-up\">\r\n                                    {this.state.allClients?.map(client =>\r\n                                        client.company === company &&\r\n                                        <button style={{\r\n                                            backgroundColor: this.isSelcected(client.clientId as number) ? \"black\" : \"\",\r\n                                            color: this.isSelcected(client.clientId as number) ? \"white\" : \"\"\r\n                                        }}\r\n                                            onClick={this.addClient(client)} className=\"pop-up-btn\" \r\n                                            disabled={this.isExist(client.clientId as number)}>\r\n                                            {client.clientName}\r\n                                        </button>\r\n\r\n                                    )}\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <button onClick={this.addClientsToReport} disabled={this.state.clientsToAdd.length === 0} className=\"add-client-in-pop-up\">הוספה</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":5,"column":10,"nodeType":"130","messageId":"131","endLine":5,"endColumn":23},{"ruleId":"128","severity":1,"message":"132","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":15},{"ruleId":"128","severity":1,"message":"133","line":8,"column":10,"nodeType":"130","messageId":"131","endLine":8,"endColumn":20},{"ruleId":"134","severity":1,"message":"135","line":56,"column":44,"nodeType":"136","messageId":"137","endLine":56,"endColumn":46},{"ruleId":"138","severity":1,"message":"139","line":103,"column":25,"nodeType":"140","endLine":103,"endColumn":103},{"ruleId":"138","severity":1,"message":"139","line":118,"column":25,"nodeType":"140","endLine":118,"endColumn":60},{"ruleId":"138","severity":1,"message":"139","line":121,"column":29,"nodeType":"140","endLine":123,"endColumn":109},{"ruleId":"138","severity":1,"message":"139","line":124,"column":29,"nodeType":"140","endLine":126,"endColumn":108},{"ruleId":"128","severity":1,"message":"141","line":1,"column":28,"nodeType":"130","messageId":"131","endLine":1,"endColumn":34},{"ruleId":"128","severity":1,"message":"142","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":20},{"ruleId":"138","severity":1,"message":"139","line":117,"column":17,"nodeType":"140","endLine":117,"endColumn":171},{"ruleId":"138","severity":1,"message":"139","line":119,"column":21,"nodeType":"140","endLine":119,"endColumn":172},{"ruleId":"138","severity":1,"message":"139","line":125,"column":17,"nodeType":"140","endLine":125,"endColumn":79},{"ruleId":"128","severity":1,"message":"143","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":14},{"ruleId":"128","severity":1,"message":"129","line":7,"column":10,"nodeType":"130","messageId":"131","endLine":7,"endColumn":23},{"ruleId":"134","severity":1,"message":"135","line":64,"column":47,"nodeType":"136","messageId":"137","endLine":64,"endColumn":49},{"ruleId":"134","severity":1,"message":"135","line":65,"column":44,"nodeType":"136","messageId":"137","endLine":65,"endColumn":46},{"ruleId":"134","severity":1,"message":"135","line":76,"column":40,"nodeType":"136","messageId":"137","endLine":76,"endColumn":42},{"ruleId":"134","severity":1,"message":"135","line":77,"column":42,"nodeType":"136","messageId":"137","endLine":77,"endColumn":44},{"ruleId":"138","severity":1,"message":"139","line":110,"column":21,"nodeType":"140","endLine":110,"endColumn":112},{"ruleId":"138","severity":1,"message":"139","line":122,"column":37,"nodeType":"140","endLine":122,"endColumn":92},{"ruleId":"138","severity":1,"message":"139","line":136,"column":37,"nodeType":"140","endLine":136,"endColumn":92},{"ruleId":"138","severity":1,"message":"139","line":158,"column":37,"nodeType":"140","endLine":158,"endColumn":92},{"ruleId":"138","severity":1,"message":"139","line":172,"column":37,"nodeType":"140","endLine":172,"endColumn":92},{"ruleId":"128","severity":1,"message":"141","line":1,"column":28,"nodeType":"130","messageId":"131","endLine":1,"endColumn":34},{"ruleId":"128","severity":1,"message":"142","line":9,"column":10,"nodeType":"130","messageId":"131","endLine":9,"endColumn":20},{"ruleId":"138","severity":1,"message":"139","line":145,"column":21,"nodeType":"140","endLine":145,"endColumn":93},{"ruleId":"144","severity":1,"message":"145","line":72,"column":77,"nodeType":"146","messageId":"147","endLine":72,"endColumn":78,"fix":"148"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"149","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":13},{"ruleId":"134","severity":1,"message":"135","line":40,"column":31,"nodeType":"136","messageId":"137","endLine":40,"endColumn":33},{"ruleId":"134","severity":1,"message":"135","line":86,"column":44,"nodeType":"136","messageId":"137","endLine":86,"endColumn":46},{"ruleId":"134","severity":1,"message":"135","line":87,"column":44,"nodeType":"136","messageId":"137","endLine":87,"endColumn":46},{"ruleId":"134","severity":1,"message":"135","line":97,"column":44,"nodeType":"136","messageId":"137","endLine":97,"endColumn":46},{"ruleId":"134","severity":1,"message":"135","line":98,"column":42,"nodeType":"136","messageId":"137","endLine":98,"endColumn":44},{"ruleId":"138","severity":1,"message":"139","line":124,"column":21,"nodeType":"140","endLine":124,"endColumn":110},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"@typescript-eslint/no-unused-vars","'getAllClients' is defined but never used.","Identifier","unusedVar","'store' is defined but never used.","'ActionType' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useRef' is defined but never used.","'AllClients' is defined but never used.","'exec' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"152","text":"153"},"'act' is defined but never used.","no-global-assign","no-unsafe-negation",[3012,3031],"\r\n                ."]