[{"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\index.tsx":"1","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\reportWebVitals.ts":"2","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\layout\\layout.tsx":"3","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\auth\\auth.tsx":"4","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\page-not-found\\page-not-found.tsx":"5","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\home\\home.tsx":"6","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\report-maker\\report-maker.tsx":"7","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\report\\report.tsx":"8","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\store.js":"9","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\actionType.ts":"10","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\models\\reportModel.ts":"11","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\report.ts":"12","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\all-clients\\all-clients.tsx":"13","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx":"14","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-report-nav\\top-report-nav.tsx":"15","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx":"16","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx":"17","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\campaigns\\campaigns.tsx":"18","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\link-pop-up\\link-pop-up.tsx":"19","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\appState.ts":"20","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\reducer.ts":"21","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\middleware.ts":"22","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\clients.ts":"23","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products-types.ts":"24","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\config.ts":"25","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\models\\campaignModel.ts":"26","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\models\\productModel.ts":"27","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products.ts":"28","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\campaigns.ts":"29","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\add-client-pop-up\\add-client-pop-up.tsx":"30","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\product-pop-up\\product-pop-up.tsx":"31"},{"size":333,"mtime":1610434431335,"results":"32","hashOfConfig":"33"},{"size":440,"mtime":1610434431338,"results":"34","hashOfConfig":"33"},{"size":1437,"mtime":1611482225722,"results":"35","hashOfConfig":"33"},{"size":3372,"mtime":1610543660888,"results":"36","hashOfConfig":"33"},{"size":298,"mtime":1610553161562,"results":"37","hashOfConfig":"33"},{"size":1593,"mtime":1611226079474,"results":"38","hashOfConfig":"33"},{"size":2414,"mtime":1611227665038,"results":"39","hashOfConfig":"33"},{"size":2483,"mtime":1611226079502,"results":"40","hashOfConfig":"33"},{"size":291,"mtime":1610615089055,"results":"41","hashOfConfig":"33"},{"size":575,"mtime":1611227365207,"results":"42","hashOfConfig":"33"},{"size":487,"mtime":1610550772873,"results":"43","hashOfConfig":"33"},{"size":142324,"mtime":1611226079541,"results":"44","hashOfConfig":"33"},{"size":6436,"mtime":1610641065635,"results":"45","hashOfConfig":"33"},{"size":8130,"mtime":1611227840180,"results":"46","hashOfConfig":"33"},{"size":6450,"mtime":1610625690938,"results":"47","hashOfConfig":"33"},{"size":5213,"mtime":1611226079521,"results":"48","hashOfConfig":"33"},{"size":11211,"mtime":1611229094598,"results":"49","hashOfConfig":"33"},{"size":11945,"mtime":1611242005499,"results":"50","hashOfConfig":"33"},{"size":2882,"mtime":1611226079486,"results":"51","hashOfConfig":"33"},{"size":1795,"mtime":1611227354579,"results":"52","hashOfConfig":"33"},{"size":3779,"mtime":1611227383548,"results":"53","hashOfConfig":"33"},{"size":383,"mtime":1610614979770,"results":"54","hashOfConfig":"33"},{"size":47010,"mtime":1611234752065,"results":"55","hashOfConfig":"33"},{"size":969,"mtime":1610446351855,"results":"56","hashOfConfig":"33"},{"size":344,"mtime":1610607201193,"results":"57","hashOfConfig":"33"},{"size":284,"mtime":1610632057418,"results":"58","hashOfConfig":"33"},{"size":597,"mtime":1611243309722,"results":"59","hashOfConfig":"33"},{"size":297904,"mtime":1611242056475,"results":"60","hashOfConfig":"33"},{"size":1585,"mtime":1611234785396,"results":"61","hashOfConfig":"33"},{"size":8256,"mtime":1611242017399,"results":"62","hashOfConfig":"33"},{"size":4261,"mtime":1611245642770,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"z5uj72",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"106","usedDeprecatedRules":"66"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"66"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"66"},"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\index.tsx",[],["142","143"],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\reportWebVitals.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\layout\\layout.tsx",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\auth\\auth.tsx",["144","145"],"import React, { ChangeEvent, Component } from \"react\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./auth.css\";\r\n\r\ninterface AuthState {\r\n    phoneNumber: string,\r\n    code: string,\r\n    message: string,\r\n    isPhoneLegal: boolean,\r\n    isCodeLegal: boolean,\r\n    isDisplayForBtn: boolean\r\n}\r\n\r\nexport class Auth extends Component<any, AuthState> {\r\n\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            phoneNumber: \"\",\r\n            code: \"\",\r\n            message: \"\",\r\n            isPhoneLegal: false,\r\n            isCodeLegal: false,\r\n            isDisplayForBtn: false\r\n        }\r\n    }\r\n\r\n    public setPhoneNumber = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const phoneNumber = args.target.value;\r\n        this.setState({ phoneNumber });\r\n    }\r\n\r\n    public setCode = (args: ChangeEvent<HTMLInputElement>) => {\r\n        const code = args.target.value;\r\n        this.setState({ isDisplayForBtn: true });\r\n        this.setState({ code });\r\n    }\r\n\r\n\r\n    //Demo functions\r\n    public authPhoneNumber = () => {\r\n        const demoAnswer = \"0501234567\";\r\n\r\n        let message = \"\";\r\n        let isPhoneLegal = false;\r\n\r\n        if (this.state.phoneNumber === demoAnswer) {\r\n            message = \"שלחנו לך הודעה עם קוד בן 4 ספרות\";\r\n            isPhoneLegal = true;\r\n        }\r\n        else {\r\n            message = \"מספר טלפון אינו מזוהה\";\r\n        }\r\n        this.setState({ message })\r\n        this.setState({ isPhoneLegal })\r\n    }\r\n\r\n    public authCode = () => {\r\n        const demoCode = \"1234\";\r\n\r\n        let message = \"\";\r\n        let isCodeLegal = false;\r\n\r\n        if (this.state.code === demoCode) {\r\n            message = \"ברוכים הבאים\";\r\n            isCodeLegal = true;\r\n            store.dispatch({ type: ActionType.changeAuth });\r\n            this.props.history.push('/home');\r\n        }\r\n        else {\r\n            message = \"קוד אינו חוקי\";\r\n        }\r\n        this.setState({ message })\r\n        this.setState({ isCodeLegal })\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"auth\">\r\n\r\n                <div className=\"auth-box\">\r\n\r\n                    <img className=\"auth-logo\" src=\"/assets/images/logo_factory.svg\" />\r\n                    <h1>אימות</h1>\r\n\r\n                    <button onClick={this.authPhoneNumber} className=\"send-btn\">שלח</button>\r\n                    <input onChange={this.setPhoneNumber} placeholder=\"אנא הזן מספר טלפון\" type=\"tel\" className=\"phone-box\" />\r\n                    <br />\r\n\r\n                    <input onChange={this.setCode} style={{ display: this.state.isPhoneLegal ? \"inline-block\" : \"none\" }} placeholder=\"אנא הזן את הקוד שנשלח\" type=\"text\" className=\"code-box\" />\r\n                    <br />\r\n                    {this.state.isDisplayForBtn &&\r\n                        <button onClick={this.authCode} style={{ display: this.state.isPhoneLegal ? \"inline-block\" : \"none\" }} className=\"auth-code-btn\">אמת</button>\r\n                    }\r\n                    <br />\r\n\r\n                    <span className=\"message\">{this.state.message}</span>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\page-not-found\\page-not-found.tsx",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\home\\home.tsx",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\report-maker\\report-maker.tsx",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\report\\report.tsx",["146"],"import React, { Component } from \"react\";\r\nimport { ReportModel } from \"../../models/reportModel\";\r\nimport \"./report.css\";\r\nimport { getAllReports } from \"../../data/report\";\r\nimport { Campaigns } from \"../campaigns/campaigns\";\r\nimport { TopCampaignsNav } from \"../top-campaigns-nav/top-campaigns-nav\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { FilteringSideMenu } from \"../filtering-side-menu/filtering-side-menu\";\r\nimport { LinkPopUp } from \"../link-pop-up/link-pop-up\";\r\nimport { TopReportNav } from \"../top-report-nav/top-report-nav\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\n\r\ninterface ReportState {\r\n    report: ReportModel,\r\n    isScroll: boolean,\r\n    display: boolean\r\n}\r\n\r\nexport class Report extends Component<any, ReportState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            report: new ReportModel(),\r\n            isScroll: false,\r\n            display: store.getState().isLinksPopUpShow\r\n        }\r\n\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const display = store.getState().isLinksPopUpShow;\r\n            this.setState({ display });\r\n        })\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const uuid = this.props.match.params.uuid;\r\n        const report: ReportModel = getAllReports().filter(r => r.uuid === uuid)[0];\r\n        if(!report){\r\n            this.props.history.push(\"/page-not-found\");\r\n            return;\r\n        }\r\n        this.setState({ report });\r\n\r\n        store.dispatch({ type: ActionType.updateSelectedClients, payLoad: report.clients });\r\n        store.dispatch({ type: ActionType.getSelectedProducts, payLoad: report.products });\r\n        store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: report.campaigns });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"report\">\r\n\r\n                <main>\r\n                    <div className=\"header\">\r\n                        <TopReportNav isScroll={this.state.isScroll} />\r\n                    </div>\r\n                    <Campaigns />\r\n                </main>\r\n\r\n                <aside>\r\n                    <FilteringSideMenu isOnReport={true} />\r\n                </aside>\r\n                {this.state.display && <LinkPopUp />}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\store.js",[],["147","148"],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\actionType.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\models\\reportModel.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\report.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\all-clients\\all-clients.tsx",["149","150","151","152","153"],"import React, { Component } from \"react\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport \"./all-clients.css\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\ninterface AllClientsState {\r\n    allClients: ClientModel[],\r\n    companies: string[],\r\n    isPopUpShow: boolean,\r\n    clientsToShow: ClientModel[],\r\n    selectedClients: ClientModel[]\r\n}\r\n\r\nexport class AllClients extends Component<any, AllClientsState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            allClients: [],\r\n            companies: [],\r\n            isPopUpShow: false,\r\n            clientsToShow: [],\r\n            selectedClients: store.getState().selectedClients\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            this.setState({ selectedClients });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const allClients: ClientModel[] = getAllClients();\r\n        this.setState({ allClients });\r\n        this.setState({ clientsToShow: allClients });\r\n\r\n        store.dispatch({ type: ActionType.getAllClients, payLoad: allClients });\r\n\r\n    }\r\n\r\n\r\n    //Display latest campaigns who changed first  \r\n    public filterByLatest = () => {\r\n        const allClients = [...this.state.allClients];\r\n        for (const client of allClients) {\r\n            client.timePassed = Date.parse(client.lastUpdate as string)\r\n        }\r\n        allClients.sort((a, b) => ((a.timePassed as number) > (b.timePassed as number)) ? 1 : -1);\r\n        this.setState({clientsToShow: allClients});\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n\r\n\r\n    //Add client to clients top list\r\n    public selectClient = (client: ClientModel) => (event: any) => {\r\n        const selectedClients: ClientModel[] = store.getState().selectedClients;\r\n        let isUnique: boolean = true;\r\n        selectedClients.map(selectedClient => {\r\n            if (selectedClient.clientId === client.clientId) {\r\n                isUnique = false;\r\n                store.dispatch({ type: ActionType.removeClient, payLoad: client.clientId });\r\n                return;\r\n            }\r\n        })\r\n        if (isUnique) {\r\n            let selectedClients = [...this.state.selectedClients];\r\n            selectedClients.push(client);\r\n            this.setState({ selectedClients });\r\n            store.dispatch({ type: ActionType.addClientToSelectedClients, payLoad: client });\r\n        }\r\n    }\r\n\r\n\r\n    //Filter companies by company in Mccann\r\n    public filterByCompany = (companyName: string) => (event: any) => {\r\n\r\n        if (companyName === \"הכל\") {\r\n            const allClients = [...this.state.allClients];\r\n            this.setState({ clientsToShow: allClients });\r\n            return;\r\n        }\r\n\r\n        const clientsToShow = this.state.allClients.filter(c => c.company === companyName);\r\n        this.setState({ clientsToShow });\r\n    }\r\n\r\n    public filterAlphabetically = () => {\r\n        const clientsByAlphabetically = this.state.allClients.map(c => c.clientName).sort();\r\n        let clientsToShow: ClientModel[] = [];\r\n        for (let i = 0; i <= clientsByAlphabetically.length; i++) {\r\n            for (const client of this.state.allClients) {\r\n                if (client.clientName === clientsByAlphabetically[i]) {\r\n                    clientsToShow.push(client);\r\n                }\r\n            }\r\n        }\r\n        this.setState({ clientsToShow });\r\n    }\r\n\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"all-clients\">\r\n\r\n                {this.state.allClients.length === 0 && <img className=\"loader\" src=\"./assets/images/loading.gif\" />}\r\n\r\n                <div className=\"filter-area\">\r\n                    <div className=\"left-filter\">\r\n                        <img className=\"filter-by-date-img\" src=\"./assets/images/filter_by_date.svg\" />\r\n                        <span className=\"filter-by-new\" onClick={this.filterByLatest}>Latest</span>\r\n                        <span className=\"separate\">|</span>\r\n                        <span className=\"filter-by-name\" onClick={this.filterAlphabetically}>A <span className=\"inside-filter\">to</span> Z</span>\r\n                    </div>\r\n\r\n\r\n                    <span onMouseEnter={() => this.setState({ isPopUpShow: true })}\r\n                        onMouseLeave={() => this.setState({ isPopUpShow: false })}\r\n                        className=\"filter-by-company\">דוח לפי חברה</span>\r\n\r\n                </div>\r\n\r\n                {this.state.clientsToShow.map(client =>\r\n                    <div className=\"client\">\r\n                        <img src={client.clientImageSrc} onClick={this.selectClient(client)}/>\r\n                        <div className=\"client-info\">\r\n\r\n                            <button className={this.state.selectedClients.filter(c => c.clientId === client.clientId).length === 0 ? \"btn-before\" : \"btn-after\"}>\r\n                                <AddIcon className=\"plus-icon\" onClick={this.selectClient(client)} />\r\n                            </button>\r\n                            <span>{client.clientName}</span>\r\n                        </div>\r\n                    </div>)}\r\n\r\n                <div style={{ display: this.state.isPopUpShow ? \"block\" : \"none\" }} className=\"company-filter-pop-up-menu\"\r\n                    onMouseEnter={() => this.setState({ isPopUpShow: true })}\r\n                    onMouseLeave={() => this.setState({ isPopUpShow: false })}>\r\n                    <span onClick={this.filterByCompany(\"הכל\")} className=\"company-name\">כל הלקוחות</span>\r\n                    <span onClick={this.filterByCompany(\"Mccann\")} className=\"company-name\">לקוחות Mccann</span>\r\n                    <span onClick={this.filterByCompany(\"MRM\")} className=\"company-name\">לקוחות MRM</span>\r\n                    <span onClick={this.filterByCompany(\"Valley\")} className=\"company-name\">לקוחות Valley</span>\r\n                    <span onClick={this.filterByCompany(\"UMD\")} className=\"company-name\">לקוחות UMD</span>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-campaigns-nav\\top-campaigns-nav.tsx",["154","155","156","157"],"import React, { Component, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { ProductsType } from \"../../models/productsTypeModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport { AddClientPopUp } from \"../add-client-pop-up/add-client-pop-up\";\r\nimport { AllClients } from \"../all-clients/all-clients\";\r\nimport \"./top-campaigns-nav.css\";\r\n\r\ninterface TopCampaignsNavProps {\r\n    isScroll: boolean\r\n}\r\n\r\ninterface TopCampaignsNavState {\r\n    selectedClients: ClientModel[],\r\n    clientsToDisplay: ClientModel[],\r\n    isButtonsScrolled: boolean,\r\n    display: boolean,\r\n    filteringBefore: {\r\n        beforeCampaignsToDisplay: CampaignModel[],\r\n        beforeProductsToDisplay: ProductModel[]\r\n\r\n    }\r\n}\r\n\r\nexport class TopCampaignsNav extends Component<TopCampaignsNavProps, TopCampaignsNavState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    public buttonsRef = React.createRef<HTMLDivElement>();\r\n    public topNavRef = React.createRef<HTMLDivElement>();\r\n\r\n\r\n    public constructor(props: TopCampaignsNavProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            clientsToDisplay: store.getState().clientsToDisplay,\r\n            isButtonsScrolled: false,\r\n            display: store.getState().isPopUpShow,\r\n            filteringBefore: {\r\n                beforeCampaignsToDisplay: [],\r\n                beforeProductsToDisplay: []\r\n            }\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const display = store.getState().isPopUpShow;\r\n            const clientsToDisplay = store.getState().clientsToDisplay;\r\n            this.setState({ selectedClients });\r\n            this.setState({ display });\r\n            this.setState({ clientsToDisplay });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n        const maxWidth = topNavWidth / 100 * 60;\r\n\r\n        window.addEventListener(\"click\", () => {\r\n            const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n            if (buttonsWidth > maxWidth) {\r\n                this.setState({ isButtonsScrolled: true });\r\n            }\r\n            else {\r\n                this.setState({ isButtonsScrolled: false });\r\n            }\r\n        })\r\n    }\r\n\r\n    public filterByClientId = (clientId: number) => (event: any) => {\r\n\r\n        const campaignsToDisplay: CampaignModel[] = [];\r\n\r\n        const filteringBefore = { ...this.state.filteringBefore };\r\n        filteringBefore.beforeCampaignsToDisplay = store.getState().campaignsToDisplay;\r\n        filteringBefore.beforeProductsToDisplay = store.getState().productsToDisplay;\r\n        this.setState({ filteringBefore });\r\n\r\n        const allSelectedCampaigns = store.getState().selectedCampaigns;\r\n        for (const c of allSelectedCampaigns) {\r\n            if (c.clientId === clientId) {\r\n                campaignsToDisplay.push(c);\r\n            }\r\n        }\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: campaignsToDisplay });\r\n     \r\n\r\n        const clientsToDisplay: ClientModel[] = [];\r\n        const allSelectedClients = store.getState().selectedClients;\r\n        for (const c of allSelectedClients) {\r\n            if (c.clientId === clientId) {\r\n                clientsToDisplay.push(c);\r\n            }\r\n        }\r\n\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: clientsToDisplay });\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public scrollToRight = () => {\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public scrollToLeft = () => {\r\n        const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: -buttonsWidth,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n\r\n    public removeClient = (clientId: number) => (event: any) => {\r\n\r\n        //Remove from clients in redux\r\n        const selectedClients = [...this.state.selectedClients];\r\n        const index = selectedClients.findIndex(c => c.clientId === clientId);\r\n        selectedClients.splice(index, 1);\r\n        this.setState({ selectedClients });\r\n\r\n        store.dispatch({ type: ActionType.removeClient, payLoad: clientId });\r\n\r\n    }\r\n\r\n    public openPopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForPopUp, payLoad: false });\r\n    }\r\n\r\n    public resetClientsToDisplay = () => {\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: [] });\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: this.state.filteringBefore.beforeCampaignsToDisplay });\r\n        store.dispatch({ type: ActionType.updateProductsToDisplay, payLoad: this.state.filteringBefore.beforeProductsToDisplay });\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div ref={this.topNavRef} className=\"top-campaigns-nav\">\r\n                <div ref={this.buttonsRef} className=\"campaigns-buttons\">\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-start-of-buttons-section\" onMouseEnter={this.scrollToRight}></div>\r\n\r\n\r\n\r\n                    {this.state.clientsToDisplay.length === 0 && this.state?.selectedClients.map(client =>\r\n                        <button className=\"campaigns-client-btn\" onClick={this.filterByClientId(client.clientId as number)}>\r\n                            <button className=\"campaigns-remove-btn\" onClick={this.removeClient(client.clientId as number)}>\r\n                                <span>&#10006;</span>\r\n                            </button>\r\n                            <span className=\"campaigns-inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    {this.state.clientsToDisplay.length > 0 && this.state?.clientsToDisplay.map(client =>\r\n                        <button className=\"campaigns-client-btn\" onClick={this.filterByClientId(client.clientId as number)}>\r\n                            <button className=\"campaigns-remove-btn\" onClick={this.removeClient(client.clientId as number)}>\r\n                                <span>&#10006;</span>\r\n                            </button>\r\n                            <span className=\"campaigns-inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-end-of-buttons-section\" onMouseEnter={this.scrollToLeft}>\r\n                        <span className=\"campaigns-more-buttons-icon\">|</span>\r\n                    </div>\r\n                </div>\r\n\r\n                {this.state.clientsToDisplay.length === 0 &&\r\n                    <span className=\"add-client-span\" onClick={this.openPopUp}>הוספת לקוח</span>}\r\n\r\n                {this.state.clientsToDisplay.length > 0 &&\r\n                    <span className=\"add-client-span\" onClick={this.resetClientsToDisplay}>כל הלקוחות</span>}\r\n\r\n                <div className=\"campaigns-top-scroll\" style={{ top: this.props.isScroll ? this.topNavRef.current?.clientHeight : 0 }}></div>\r\n\r\n                <NavLink to=\"/home\">\r\n                    <img className=\"campaigns-logo\" src=\"./assets/images/logo_factory.svg\" />\r\n                </NavLink>\r\n\r\n                {this.state.display &&\r\n                    <AddClientPopUp />\r\n                }\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-report-nav\\top-report-nav.tsx",["158","159","160","161"],"import React, { Component, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport { AddClientPopUp } from \"../add-client-pop-up/add-client-pop-up\";\r\nimport { AllClients } from \"../all-clients/all-clients\";\r\nimport \"./top-report-nav.css\";\r\n\r\ninterface TopReportNavProps {\r\n    isScroll: boolean\r\n}\r\n\r\ninterface TopReportNavState {\r\n    selectedClients: ClientModel[],\r\n    isButtonsScrolled: boolean,\r\n    display: boolean,\r\n    filteringBefore: {\r\n        beforeCampaignsToDisplay: CampaignModel[],\r\n        beforeProductsToDisplay: ProductModel[]\r\n\r\n    }\r\n}\r\n\r\nexport class TopReportNav extends Component<TopReportNavProps, TopReportNavState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    public buttonsRef = React.createRef<HTMLDivElement>();\r\n    public topNavRef = React.createRef<HTMLDivElement>();\r\n\r\n\r\n    public constructor(props: TopReportNavProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            isButtonsScrolled: false,\r\n            display: store.getState().isPopUpShow,\r\n            filteringBefore: {\r\n                beforeCampaignsToDisplay: [],\r\n                beforeProductsToDisplay: []\r\n            }\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const display = store.getState().isPopUpShow;\r\n            this.setState({ selectedClients });\r\n            this.setState({ display });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n        const maxWidth = topNavWidth / 100 * 70;\r\n\r\n        window.addEventListener(\"click\", () => {\r\n            const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n            if (buttonsWidth > maxWidth) {\r\n                this.setState({ isButtonsScrolled: true });\r\n            }\r\n            else {\r\n                this.setState({ isButtonsScrolled: false });\r\n            }\r\n        })\r\n    }\r\n\r\n    public filterByClientId = (clientId: number) => (event: any) => {\r\n      \r\n        const campaignsToDisplay: CampaignModel[] = [];\r\n\r\n        const filteringBefore = { ...this.state.filteringBefore };\r\n        filteringBefore.beforeCampaignsToDisplay = store.getState().campaignsToDisplay;\r\n        filteringBefore.beforeProductsToDisplay = store.getState().productsToDisplay;\r\n        this.setState({ filteringBefore });\r\n\r\n        const allSelectedCampaigns = store.getState().selectedCampaigns;\r\n        for (const c of allSelectedCampaigns) {\r\n            if (c.clientId === clientId) {\r\n                campaignsToDisplay.push(c);\r\n            }\r\n        }\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: campaignsToDisplay });\r\n     \r\n\r\n        const clientsToDisplay: ClientModel[] = [];\r\n        const allSelectedClients = store.getState().selectedClients;\r\n        for (const c of allSelectedClients) {\r\n            if (c.clientId === clientId) {\r\n                clientsToDisplay.push(c);\r\n            }\r\n        }\r\n\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: clientsToDisplay });\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public scrollToRight = () => {\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public scrollToLeft = () => {\r\n        const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: -buttonsWidth,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n\r\n    public openPopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForPopUp, payLoad: false });\r\n    }\r\n\r\n    public resetClientsToDisplay = () => {\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: [] });\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: this.state.filteringBefore.beforeCampaignsToDisplay });\r\n        store.dispatch({ type: ActionType.updateProductsToDisplay, payLoad: this.state.filteringBefore.beforeProductsToDisplay });\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div ref={this.topNavRef} className=\"top-campaigns-nav-report\">\r\n                <div ref={this.buttonsRef} className=\"campaigns-buttons\">\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-start-of-buttons-section\" onMouseEnter={this.scrollToRight}></div>\r\n\r\n                    <button className=\"campaigns-client-btn\" onClick={this.resetClientsToDisplay}>\r\n                        <button className=\"campaigns-remove-btn\" style={{ opacity: 0 }}>\r\n                            <span>&#10006;</span>\r\n                        </button>\r\n                        <span className=\"campaigns-inside-client-btn\">All</span>\r\n                    </button>\r\n\r\n\r\n                    {this.state?.selectedClients.map(client =>\r\n                        <button className=\"campaigns-client-btn\" onClick={this.filterByClientId(client.clientId as number)}>\r\n                            <span className=\"campaigns-inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"campaigns-end-of-buttons-section\" onMouseEnter={this.scrollToLeft}>\r\n                        <span className=\"campaigns-more-buttons-icon\">|</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"campaigns-top-scroll\" style={{ top: this.props.isScroll ? \"6vw\" : 0 }}></div>\r\n\r\n                <img className=\"campaigns-logo\" src=\"./assets/images/logo_factory.svg\" />\r\n\r\n                {this.state.display &&\r\n                    <AddClientPopUp />\r\n                }\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\top-clients-nav\\top-clients-nav.tsx",["162","163","164","165","166"],"import React, { Component, useRef } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport { AllClients } from \"../all-clients/all-clients\";\r\nimport \"./top-clients-nav.css\";\r\n\r\ninterface TopClientsNavProps {\r\n    isScroll: boolean\r\n}\r\n\r\ninterface TopClientsNavState {\r\n    selectedClients: ClientModel[],\r\n    isButtonsScrolled: boolean,\r\n}\r\n\r\nexport class TopClientsNav extends Component<TopClientsNavProps, TopClientsNavState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    public buttonsRef = React.createRef<HTMLDivElement>();\r\n    public topNavRef = React.createRef<HTMLDivElement>();\r\n\r\n\r\n    public constructor(props: TopClientsNavProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            isButtonsScrolled: false\r\n        }\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            this.setState({ selectedClients });\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        const topNavWidth: number = this.topNavRef.current?.clientWidth as number;\r\n        const maxWidth = topNavWidth / 100 * 60;\r\n\r\n        window.addEventListener(\"click\", () => {\r\n            const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n            if (buttonsWidth > maxWidth) {\r\n                this.setState({ isButtonsScrolled: true });\r\n            }\r\n            else {\r\n                this.setState({ isButtonsScrolled: false });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n    public scrollToRight = () => {\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public scrollToLeft = () => {\r\n        const buttonsWidth = this.buttonsRef.current?.scrollWidth as number;\r\n        this.buttonsRef.current?.scrollTo({\r\n            top: 0,\r\n            left: -buttonsWidth,\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    public removeAllClients = () => {\r\n        this.setState({ selectedClients: [] })\r\n        store.dispatch({ type: ActionType.unselectAllClients });\r\n    }\r\n\r\n    public removeClient = (clientId: number) => (event: any) => {\r\n        const selectedClients = [...this.state.selectedClients];\r\n        const index = selectedClients.findIndex(c => c.clientId === clientId);\r\n        selectedClients.splice(index, 1);\r\n        this.setState({ selectedClients });\r\n\r\n        store.dispatch({ type: ActionType.removeClient, payLoad: clientId });\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div ref={this.topNavRef} className=\"top-companies-nav\">\r\n                <button className=\"no-selected-button\" style={{ display: this.state.selectedClients.length === 0 ? \"block\" : \"none\" }}>\r\n                    +\r\n                </button>\r\n                <div ref={this.buttonsRef} className=\"buttons\">\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"start-of-buttons-section\" onMouseEnter={this.scrollToRight}></div>\r\n\r\n                    {this.state?.selectedClients.map(client =>\r\n                        <button className=\"client-btn\">\r\n                            <button className=\"remove-btn\" onClick={this.removeClient(client.clientId as number)}>\r\n                                <span>&#10006;</span>\r\n                            </button>\r\n                            <span className=\"inside-client-btn\">{client.clientName}</span>\r\n                        </button>\r\n                    )}\r\n\r\n                    <div style={{ display: this.state.isButtonsScrolled ? \"block\" : \"none\" }}\r\n                        className=\"end-of-buttons-section\" onMouseEnter={this.scrollToLeft}>\r\n                        <span className=\"more-buttons-icon\">|</span>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <div className=\"top-scroll\" style={{ top: this.props.isScroll ? this.topNavRef.current?.clientHeight : 0 }}></div>\r\n                <img src=\"./assets/images/pink_btn_before.svg\" className=\"next-btn-pink\" style={{ display: this.state.selectedClients.length === 0 ? \"block\" : \"none\" }} />\r\n                <NavLink onClick={() => console.log(store.getState().selectedClients)} to=\"/report-maker\" className=\"link-to-report-maker\" exact>\r\n                    <img src=\"./assets/images/pink_btn_after.svg\" className=\"next-btn-pink\" style={{ display: this.state.selectedClients.length > 0 ? \"block\" : \"none\" }} />\r\n                </NavLink>\r\n                <div className=\"other-buttons\">\r\n                    <span className=\"remove-all\" onClick={this.removeAllClients}>הסר הכל</span>\r\n                </div>\r\n\r\n                <div className=\"logo-container\"></div>\r\n                <img className=\"logo\" src=\"./assets/images/logo_factory.svg\" />\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\filtering-side-menu\\filtering-side-menu.tsx",["167","168","169","170","171"],"import React, { Component } from \"react\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./filtering-side-menu.css\";\r\nimport { getProductsTypes } from \"../../data/products-types\";\r\nimport { getAllProducts } from \"../../data/products\";\r\nimport { LinkPopUp } from \"../link-pop-up/link-pop-up\";\r\nimport { AddClientPopUp } from \"../add-client-pop-up/add-client-pop-up\";\r\nimport { ReportModel } from \"../../models/reportModel\";\r\nimport 'react-dates/initialize';\r\nimport DateRangePicker from 'react-bootstrap-daterangepicker';\r\n// import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap-daterangepicker/daterangepicker.css';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\ninterface FilteringSideMenuProps {\r\n    isOnReport: boolean\r\n\r\n}\r\ninterface FilteringSideMenuState {\r\n    selectedClients: ClientModel[],\r\n    selectedCampaigns: CampaignModel[],\r\n    campaignsToDisplay: CampaignModel[],\r\n    selectedProducts: ProductModel[],\r\n    productsToDisplay: ProductModel[],\r\n    datesRange: string\r\n}\r\n\r\nexport class FilteringSideMenu extends Component<FilteringSideMenuProps, FilteringSideMenuState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n\r\n    public constructor(props: FilteringSideMenuProps) {\r\n        super(props);\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            selectedCampaigns: store.getState().selectedCampaigns,\r\n            campaignsToDisplay: store.getState().campaignsToDisplay,\r\n            productsToDisplay: store.getState().productsToDisplay,\r\n            selectedProducts: store.getState().selectedProducts,\r\n            datesRange: \"- - / - - / - -\"\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const selectedCampaigns = store.getState().selectedCampaigns;\r\n            const selectedProducts = store.getState().selectedProducts;\r\n            const campaignsToDisplay = store.getState().campaignsToDisplay;\r\n            const productsToDisplay = store.getState().productsToDisplay;\r\n            this.setState({ selectedClients });\r\n            this.setState({ selectedCampaigns });\r\n            this.setState({ selectedProducts });\r\n            this.setState({ campaignsToDisplay });\r\n            this.setState({ productsToDisplay });\r\n        })\r\n    }\r\n\r\n\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n\r\n    //Display campaigns by campaign id (selected by name on filtering menu)\r\n    public filterByCapmaign = (campaign: CampaignModel) => (event: any) => {\r\n        const campaignsToDisplay: CampaignModel[] = [...store.getState().campaignsToDisplay];\r\n        for (const c of campaignsToDisplay) {\r\n            if (c.campaignId === campaign.campaignId) {\r\n                const index = campaignsToDisplay.indexOf(c);\r\n                campaignsToDisplay.splice(index, 1);\r\n                store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: campaignsToDisplay });\r\n                return;\r\n            }\r\n        }\r\n        campaignsToDisplay.push(campaign);\r\n        store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: campaignsToDisplay });\r\n    }\r\n\r\n    //Reset all previos filtering\r\n    public resetFiltering = () => {\r\n        store.dispatch({ type: ActionType.resetFiltering });\r\n        this.setState({ datesRange: \"- - / - - / - -\" })\r\n    }\r\n\r\n\r\n    //Display only products who match prodyctTypeId by filtering menu \r\n    public filterByProductType = (productsTypeId: number) => (event: any) => {\r\n        const productsToDisplay: ProductModel[] = [...store.getState().productsToDisplay];\r\n        const duplictes = productsToDisplay.filter(p => p.productTypeId === productsTypeId);\r\n        for (const p of duplictes) {\r\n            const index = productsToDisplay.indexOf(p);\r\n            productsToDisplay.splice(index, 1);\r\n        }\r\n\r\n        if (duplictes.length === 0) {\r\n            getAllProducts().filter(p => p.productTypeId === productsTypeId).\r\n                forEach(p => productsToDisplay.push(p));\r\n        }\r\n\r\n        store.dispatch({ type: ActionType.updateProductsToDisplay, payLoad: productsToDisplay });\r\n    }\r\n\r\n    //Open pop-up for link copy on click\r\n    public createReport = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForLinkPopUp });\r\n    }\r\n\r\n    //Checked/unchecked campaigns who choosen on any time\r\n    public isCampaignChecked = (campaignId: number) => {\r\n        const campaigns: CampaignModel[] = [...this.state.campaignsToDisplay];\r\n        const allCampaigns: CampaignModel[] = [...store.getState().selectedCampaigns];\r\n        const c = campaigns.find(campaign => campaign.campaignId === campaignId);\r\n        if (c !== undefined) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //Checked/unchecked product type who choosen on any time\r\n    public isProductTypeChecked = (productTypeId: number) => {\r\n        const products: ProductModel[] = [...this.state.productsToDisplay];\r\n        const p = products.find(product => product.productTypeId === productTypeId);\r\n        if (p !== undefined) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    //Will change  \r\n    public filterByLatest = () => {\r\n        const campaigns: CampaignModel[] = store.getState().campaignsToDisplay;\r\n        for (const c of campaigns) {\r\n            c.timePassed = Date.parse(c.lastUpdate as string)\r\n        }\r\n        campaigns.sort((a, b) => ((a.timePassed as number) > (b.timePassed as number)) ? 1 : -1);\r\n        this.setState({ campaignsToDisplay: campaigns });\r\n    }\r\n\r\n    public filterByDatesRange = (event: any, picker: any) => {\r\n        const startDate = picker.startDate._d;\r\n        const endDate = picker.endDate._d;\r\n\r\n        const min = Date.parse(startDate);\r\n        const max = Date.parse(endDate);\r\n\r\n        const campaignsToDisplay: CampaignModel[] = store.getState().campaignsToDisplay;\r\n        if (campaignsToDisplay.length > 0) {\r\n            for (const campaign of campaignsToDisplay) {\r\n                campaign.timePassed = Date.parse(campaign.lastUpdate as string);\r\n            }\r\n\r\n            const newCampaignsToDisplay: CampaignModel[] = [];\r\n            for (const c of campaignsToDisplay) {\r\n                if ((c.timePassed as number) > min && (c.timePassed as number) < max) {\r\n                    newCampaignsToDisplay.push(c);\r\n                }\r\n            }\r\n            store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: newCampaignsToDisplay });\r\n        }\r\n        else {\r\n            const selectedCampaigns: CampaignModel[] = store.getState().selectedCampaigns;\r\n            for (const campaign of selectedCampaigns) {\r\n                campaign.timePassed = Date.parse(campaign.lastUpdate as string);\r\n            }\r\n\r\n            const newCampaignsToDisplay: CampaignModel[] = [];\r\n            for (const c of selectedCampaigns) {\r\n                if ((c.timePassed as number) > min && (c.timePassed as number) < max) {\r\n                    newCampaignsToDisplay.push(c);\r\n                }\r\n            }\r\n            store.dispatch({ type: ActionType.updateCampaignsToDisplay, payLoad: newCampaignsToDisplay });\r\n        }\r\n\r\n        //Update state for display\r\n        const startDateStr = new Date(startDate).toLocaleDateString().replace(\".\", \"/\");\r\n        const endDateStr = new Date(endDate).toLocaleDateString().replace(\".\", \"/\");\r\n        const strToState = `${startDateStr.replace(\".\", \"/\")} - ${endDateStr.replace(\".\", \"/\")}`;\r\n        this.setState({ datesRange: strToState });\r\n\r\n\r\n    }\r\n\r\n    public changeDisplayForMobileMenu = ()=>{\r\n        store.dispatch({type: ActionType.changeDisplayForMobileMenu})\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"filtering-side-menu\">\r\n\r\n                <IconButton className=\"close-menu-icon\" onClick={this.changeDisplayForMobileMenu}>\r\n                    <HighlightOffIcon />\r\n                </IconButton>\r\n                <span className=\"reset-filtering\" onClick={this.resetFiltering}>איפוס סננים</span>\r\n                <br />\r\n                <DateRangePicker\r\n                    onApply={this.filterByDatesRange}\r\n                >\r\n                    <button className=\"date-picker-btn\">\r\n                        {this.state.datesRange}\r\n                        <span className=\"date-range-icon\">\r\n                            <DateRangeIcon style={{ fontSize: \"1.2vw\" }} />\r\n                        </span>\r\n                    </button>\r\n                </DateRangePicker>\r\n                <br />\r\n\r\n                <div className=\"campaigns-filtering-area\">\r\n                    <span className=\"campaign-filtering-title\">קמפיין</span>\r\n                    <br />\r\n                    <div className=\"campaigns-titles\">\r\n                        {this.state.selectedCampaigns.map(campaign =>\r\n                            <label className=\"container-for-check\">\r\n                                <input checked={this.isCampaignChecked(campaign.campaignId as number)} onClick={this.filterByCapmaign(campaign)} type=\"checkbox\" />\r\n                                <span className=\"checkmark\"></span>\r\n                                <span className=\"campaign-name-title\">\r\n                                    {campaign.campaignName}\r\n                                </span>\r\n                            </label>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"products-filtering-area\">\r\n                    <span className=\"products-filtering-title\">סוג תוצר</span>\r\n                    <br />\r\n                    <div className=\"products-titles\">\r\n\r\n                        {getProductsTypes().map(type =>\r\n                            <label className=\"container-for-check\">\r\n                                <input checked={this.isProductTypeChecked(type.productsTypeId as number)} type=\"checkbox\" onClick={this.filterByProductType(type.productsTypeId)} />\r\n                                <span className=\"checkmark\"></span>\r\n                                <span className=\"campaign-name-title\">\r\n                                    {type.nameForMany}\r\n                                </span>\r\n                            </label>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                {!this.props.isOnReport &&\r\n                    <button disabled={this.state.selectedClients.length === 0} className=\"url-sharing-area\" onClick={this.createReport}>\r\n                        <span>יצירת URL לשיתוף</span>\r\n                    </button>\r\n                }\r\n\r\n\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\campaigns\\campaigns.tsx",["172","173","174","175","176","177","178","179","180","181","182","183","184"],"import { exec } from \"child_process\";\r\nimport React, { Component } from \"react\";\r\nimport \"./campaigns.css\";\r\nimport { Unsubscribe } from \"redux\";\r\nimport { store } from \"../../redux/store\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { getAllCampaigns } from \"../../data/campaigns\";\r\nimport { getAllProducts } from \"../../data/products\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport { getProductsTypes } from \"../../data/products-types\";\r\nimport { ProductPopUp } from \"../product-pop-up/product-pop-up\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Aos from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\ninterface ReportMakerState {\r\n    selectedClients: ClientModel[],\r\n    selectedCampaigns: CampaignModel[],\r\n    selectedProducts: ProductModel[]\r\n    productsToDisplay: ProductModel[],\r\n    campaignsToDisplay: CampaignModel[],\r\n    display: boolean,\r\n    productToPopUp: ProductModel,\r\n    campignToPopUp: CampaignModel\r\n}\r\n\r\n\r\n\r\nexport class Campaigns extends Component<any, ReportMakerState>{\r\n\r\n    private unsubscribeStore: Unsubscribe;\r\n    private filteringMenuRef = React.createRef<HTMLDivElement>();\r\n\r\n    \r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            selectedClients: store.getState().selectedClients,\r\n            selectedCampaigns: store.getState().selectedCampaigns,\r\n            selectedProducts: store.getState().selectedProducts,\r\n            campaignsToDisplay: store.getState().campaignsToDisplay,\r\n            productsToDisplay: store.getState().campaignsToDisplay,\r\n            display: store.getState().isPopUpShow,\r\n            productToPopUp: new ProductModel(),\r\n            campignToPopUp: new CampaignModel()\r\n        }\r\n\r\n        this.unsubscribeStore = store.subscribe(() => {\r\n            const selectedClients = store.getState().selectedClients;\r\n            const selectedCampaigns = store.getState().selectedCampaigns;\r\n            const selectedProducts = store.getState().selectedProducts;\r\n            const campaignsToDisplay = store.getState().campaignsToDisplay;\r\n            const productsToDisplay = store.getState().productsToDisplay;\r\n            const display = store.getState().isProductsPopUpShow;\r\n            this.setState({ selectedClients });\r\n            this.setState({ selectedCampaigns });\r\n            this.setState({ selectedProducts });\r\n            this.setState({ campaignsToDisplay });\r\n            this.setState({ productsToDisplay });\r\n            this.setState({ display });\r\n        })\r\n    }\r\n\r\n    public getProductTypeName = (productTypeId: number) => {\r\n        for (const type of getProductsTypes()) {\r\n            if (type.productsTypeId === productTypeId) {\r\n                return type.nameForSingle;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public componentDidMount() {\r\n        Aos.init({duration: 1000});\r\n        const selectedCampaigns: CampaignModel[] = [];\r\n        this.state.selectedClients.map(client => {\r\n            getAllCampaigns().map(campaign => {\r\n                if (campaign.clientId === client.clientId) {\r\n                    selectedCampaigns.push(campaign);\r\n                }\r\n            })\r\n        })\r\n\r\n        this.setState({ selectedCampaigns });\r\n        store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: selectedCampaigns });\r\n\r\n        const selectedProducts: ProductModel[] = [];\r\n        selectedCampaigns.map(campaign => {\r\n            getAllProducts().map(product => {\r\n                if (product.campaignId === campaign.campaignId) {\r\n                    selectedProducts.push(product);\r\n\r\n                }\r\n            })\r\n        })\r\n        this.setState({ selectedProducts });\r\n        store.dispatch({ type: ActionType.getSelectedProducts, payLoad: selectedProducts });\r\n    }\r\n\r\n    public componentWillUnmount(): void {\r\n        this.unsubscribeStore();\r\n    }\r\n\r\n\r\n    //Return colors for light button by success rates (green/yellow/red)\r\n    public getSuccessRateColor = (successRate: number) => {\r\n        if (successRate <= 50) {\r\n            return \"#E4002B\";\r\n        }\r\n        else if (successRate > 50 && successRate < 80) {\r\n            return \"#FFDB48\";\r\n        }\r\n\r\n        else if (successRate >= 80) {\r\n            return \"#1CE5A2\";\r\n        }\r\n    }\r\n    \r\n\r\n    //Product is automaticlly sending to Pop Up by props \r\n    public setProductToDisplayInPopUp = (product: ProductModel, campaign: CampaignModel) => (event: any) => {\r\n        this.setState({ productToPopUp: product });\r\n        this.setState({ campignToPopUp: campaign });\r\n        store.dispatch({ type: ActionType.changeDisplayForProductsPopUp });\r\n    }\r\n\r\n\r\n    //If campaign have product to disaply - show his name on title\r\n    public isProductsToDisplayOnCampaign = (campaignId: number) => {\r\n        if(this.state.productsToDisplay.length !== 0){\r\n            const productsToDisplay = this.state.productsToDisplay.filter(p => p.campaignId === campaignId);\r\n            if(productsToDisplay.length === 0){\r\n                return false;\r\n            }\r\n            return true;\r\n           \r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public changeDisplayForMobileMenu = ()=>{\r\n        store.dispatch({type: ActionType.changeDisplayForMobileMenu})\r\n    }\r\n\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"campaigns\">\r\n\r\n                <div className=\"campaigns-left-filter\" ref={this.filteringMenuRef}>\r\n                    <img className=\"campaigns-filter-by-success-img\" src=\"./assets/images/filter_by_date.svg\" />\r\n                    <span className=\"campaigns-filter-by-high\">Highest first</span>\r\n                    <span className=\"campaigns-separate\">|</span>\r\n                    <span className=\"campaigns-filter-by-low\">Lowest first</span>\r\n\r\n                    <IconButton className=\"filter-icon\" onClick={this.changeDisplayForMobileMenu}>\r\n                    <FilterListIcon/>\r\n                    </IconButton>\r\n                </div>\r\n\r\n                {this.state.campaignsToDisplay.length !== 0 && this.state.campaignsToDisplay?.map(campaign =>\r\n                    <div className=\"client-in-campaigns\">\r\n                        {this.isProductsToDisplayOnCampaign(campaign.campaignId as number) && <h2>{campaign.campaignName}</h2>}\r\n                        <div className=\"grid\">\r\n                            {this.state.productsToDisplay.length === 0 && this.state.selectedProducts?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)}/>\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                            {this.state.productsToDisplay.length !== 0 && this.state.productsToDisplay?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)}/>\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {this.state.campaignsToDisplay.length === 0 && this.state.selectedCampaigns?.map(campaign =>\r\n                    <div className=\"client-in-campaigns\">\r\n                        {this.isProductsToDisplayOnCampaign(campaign.campaignId as number) && <h2>{campaign.campaignName}</h2>}\r\n                        <div className=\"grid\">\r\n                            {this.state.productsToDisplay.length === 0 && this.state.selectedProducts?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)} />\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                            {this.state.productsToDisplay.length !== 0 && this.state.productsToDisplay?.filter(product => product.campaignId === campaign.campaignId).map(product =>\r\n                                <div className=\"campaign\" data-aos=\"fade-up\">\r\n                                    <img className=\"campaign-img\" src={product.images?.img1} onClick={this.setProductToDisplayInPopUp(product, campaign)}/>\r\n                                    <div className=\"campaign-info\">\r\n                                        <span className=\"product-type-title\">{this.getProductTypeName(product.productTypeId as number)}</span>\r\n                                        <span className=\"success-rate\">\r\n                                            <li className=\"success-color\" style={{ color: this.getSuccessRateColor(product.successRates as number) }}> </li>\r\n                                           % {product.successRates}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <img className=\"up-btn\" onClick={() => this.filteringMenuRef.current?.scrollIntoView({behavior: \"smooth\", block: \"end\", inline: \"nearest\"})} src=\"/assets/images/pink_btn_after.svg\"/>\r\n                {this.state.display && <ProductPopUp campaign={this.state.campignToPopUp} product={this.state.productToPopUp} />}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\link-pop-up\\link-pop-up.tsx",["185"],"import React, { Component } from \"react\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./link-pop-up.css\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { Config } from \"../../config\";\r\nimport { config } from \"process\";\r\nimport { ReportModel } from \"../../models/reportModel\";\r\nimport { getAllReports } from \"../../data/report\";\r\n\r\ninterface LinkPopUpState {\r\n    url: string\r\n}\r\nexport class LinkPopUp extends Component<any, LinkPopUpState>{\r\n\r\n    public urlInput = React.createRef<HTMLDivElement>();\r\n\r\n    public linkRef = React.createRef<HTMLInputElement>();\r\n\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            url: Config.serverUrl + \"/213276a8-8eb2-4710-b97d-9d67e9aeaae9\"\r\n        }\r\n    }\r\n\r\n\r\n    public uuid = () => {\r\n        const hashTable = [\r\n            'a', 'b', 'c', 'd', 'e', 'f',\r\n            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\r\n        ]\r\n        let uuid = []\r\n        for (let i = 0; i < 35; i++) {\r\n            if (i === 7 || i === 12 || i === 17 || i === 22) {\r\n                uuid[i] = '-'\r\n            } else {\r\n                uuid[i] = hashTable[Math.floor(Math.random() * hashTable.length - 1)]\r\n            }\r\n        }\r\n        return uuid.join('');\r\n    }\r\n\r\n\r\n    public postToReports = () => {\r\n\r\n        //Made new report\r\n        const report = new ReportModel();\r\n        const allReports = getAllReports();\r\n        report.reportId = allReports.length + 1;\r\n        const uuid: string = this.uuid();\r\n        report.uuid = uuid;\r\n\r\n        //Push new report all selections\r\n        report.clients = store.getState().selectedClients;\r\n        report.campaigns = store.getState().campaignsToDisplay;\r\n        report.products = store.getState().productsToDisplay;\r\n    }\r\n\r\n\r\n    public closePopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForLinkPopUp });\r\n    }\r\n\r\n    public stopPropagation = (e: any) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    public copyToClipboard = () => {\r\n        this.postToReports();\r\n\r\n        this.linkRef.current?.select();\r\n        document.execCommand(\"copy\");\r\n    };\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"full-screen-link-conatiner\" onClick={this.closePopUp} >\r\n                <div className=\"small-link-conatiner\" onClick={this.stopPropagation}>\r\n                    <button className=\"close-link-pop-up-btn\" onClick={this.closePopUp} ><CloseIcon /></button>\r\n\r\n                    <h2 className=\"link-title\">הלינק לשיתוף</h2>\r\n                    <input ref={this.linkRef} className=\"url-box\" value={this.state.url} />\r\n\r\n                    <button onClick={this.copyToClipboard} className=\"copy-link-btn\">Copy link</button>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\appState.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\reducer.ts",["186"],"import { AppState } from \"./appState\";\r\nimport { Action } from \"./action\";\r\nimport { ActionType } from \"./actionType\";\r\nimport { act } from \"react-dom/test-utils\";\r\n\r\nexport function reducer(oldAppState: AppState, action: Action): AppState {\r\n  const newAppState = { ...oldAppState }; //Duplicate the old state into a new state\r\n\r\n  switch (action.type) {\r\n    case ActionType.getAllClients:\r\n      newAppState.allClients = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.getAllCampaigns:\r\n      newAppState.allCampaigns = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.getAllProducts:\r\n      newAppState.allProducts = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.addClientToSelectedClients:\r\n      newAppState.selectedClients.push(action.payLoad);\r\n      break;\r\n\r\n    case ActionType.unselectAllClients:\r\n      newAppState.selectedClients = [];\r\n      break;\r\n\r\n    case ActionType.updateSelectedClients:\r\n      newAppState.selectedClients = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.getSelectedProducts:\r\n      newAppState.selectedProducts = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.updateCampaignsToDisplay:\r\n      newAppState.campaignsToDisplay = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.updateClientsToDisplay:\r\n      newAppState.clientsToDisplay = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.updateProductsToDisplay:\r\n      newAppState.productsToDisplay = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.resetFiltering:\r\n      newAppState.campaignsToDisplay = [];\r\n      newAppState.productsToDisplay = [];\r\n      newAppState.clientsToDisplay = [];\r\n      break;\r\n\r\n    case ActionType.getSelectedCampaigns:\r\n      newAppState.selectedCampaigns = action.payLoad;\r\n      break;\r\n\r\n    case ActionType.changeAuth:\r\n      if (!newAppState.isAuthSucceeded) {\r\n        newAppState.isAuthSucceeded = true;\r\n      }\r\n      else {\r\n        newAppState.isAuthSucceeded = false;\r\n      }\r\n      break;\r\n\r\n    case ActionType.changeDisplayForPopUp:\r\n      if (newAppState.isPopUpShow) {\r\n        newAppState.isPopUpShow = false;\r\n      }\r\n      else {\r\n        newAppState.isPopUpShow = true;\r\n      }\r\n      break;\r\n\r\n    case ActionType.changeDisplayForProductsPopUp:\r\n      if (newAppState.isProductsPopUpShow) {\r\n        newAppState.isProductsPopUpShow = false;\r\n      }\r\n      else {\r\n        newAppState.isProductsPopUpShow = true;\r\n      }\r\n      break;\r\n\r\n    case ActionType.changeDisplayForLinkPopUp:\r\n      if (newAppState.isLinksPopUpShow) {\r\n        newAppState.isLinksPopUpShow = false;\r\n      }\r\n      else {\r\n        newAppState.isLinksPopUpShow = true;\r\n      }\r\n      break;\r\n\r\n    case ActionType.changeDisplayForMobileMenu:\r\n      if (newAppState.isMobileMenuShow) {\r\n        newAppState.isMobileMenuShow = false;\r\n      }\r\n      else {\r\n        newAppState.isMobileMenuShow = true;\r\n      }\r\n      break;\r\n\r\n    case ActionType.removeClient:\r\n      const clientId = action.payLoad;\r\n      const index = newAppState.selectedClients.findIndex(\r\n        (c) => c.clientId === clientId\r\n      );\r\n      \r\n      newAppState.selectedClients.splice(index, 1);\r\n      newAppState.selectedCampaigns = newAppState.selectedCampaigns.filter(c => c.clientId !== action.payLoad);\r\n      newAppState.campaignsToDisplay = newAppState.campaignsToDisplay.filter(c => c.clientId !== action.payLoad);\r\n      newAppState.selectedProducts = newAppState.selectedProducts.filter(c => c.clientId !== action.payLoad);\r\n      newAppState.productsToDisplay = newAppState.productsToDisplay.filter(c => c.clientId !== action.payLoad);\r\n      newAppState.clientsToDisplay = newAppState.clientsToDisplay.filter(c => c.clientId !== action.payLoad);\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return newAppState;\r\n}\r\n","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\redux\\middleware.ts",["187","188","189"],"import { Store } from \"redux\";\r\nimport { AppState } from \"./appState\";\r\nimport { Action } from \"./action\";\r\n\r\n// תחביר מקוצר לפונקציה הנ\"ל\r\nexport const saveToSessionStorage = (store: { getState: () => any; }) => (next: (arg0: any) => void) => (action: any) => {\r\n    next(action);\r\n    sessionStorage.setItem(\"AppState\", JSON.stringify(store.getState()));\r\n};\r\n","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\clients.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products-types.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\config.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\models\\campaignModel.ts",["190"],"import { ProductModel } from \"./productModel\";\r\n\r\nexport class CampaignModel {\r\n  public constructor(\r\n    public campaignId?: number,\r\n    public clientId?: number,\r\n    public campaignName?: string,\r\n    public lastUpdate?: string,\r\n    public timePassed?: number\r\n\r\n  ) {\r\n  }\r\n}\r\n","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\models\\productModel.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\products.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\data\\campaigns.ts",[],"C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\add-client-pop-up\\add-client-pop-up.tsx",["191","192","193","194","195"],"import React, { Component } from \"react\";\r\nimport { ClientModel } from \"../../models/clientModel\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./add-client-pop-up.css\";\r\nimport { getAllClients } from \"../../data/clients\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport { getAllCampaigns } from \"../../data/campaigns\";\r\nimport { getAllProducts } from \"../../data/products\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\ninterface AddClientPopUpState {\r\n    allClients: ClientModel[],\r\n    companies: string[],\r\n    clientsToAdd: ClientModel[]\r\n}\r\n\r\nexport class AddClientPopUp extends Component<any, AddClientPopUpState>{\r\n\r\n    private companies: string[] = [];\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            allClients: store.getState().allClients,\r\n            companies: [],\r\n            clientsToAdd: []\r\n        }\r\n    }\r\n\r\n    public closePopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForPopUp, payLoad: true });\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const allClients = getAllClients();\r\n        this.setState({ allClients });\r\n\r\n        let companies: string[] = [];\r\n        allClients.map(client => {\r\n            const duplicate = companies.find(c => c === client.company);\r\n            if (!duplicate) {\r\n                companies.push(client.company);\r\n            }\r\n        })\r\n        this.setState({ companies });\r\n    }\r\n\r\n    public stopPropagation = (e: any) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    public addClient = (client: ClientModel) => (event: any) => {\r\n        const clientsToAdd = [...this.state.clientsToAdd];\r\n        for (const c of clientsToAdd) {\r\n            if (c.clientId === client.clientId) {\r\n                const index = clientsToAdd.indexOf(c);\r\n                clientsToAdd.splice(index, 1);\r\n                this.setState({ clientsToAdd });\r\n                return;\r\n            }\r\n        }\r\n\r\n        clientsToAdd.push(client);\r\n        this.setState({ clientsToAdd });\r\n\r\n    }\r\n\r\n    public isSelcected = (clientId: number) => {\r\n        for (const c of this.state.clientsToAdd) {\r\n            if (c.clientId === clientId) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public addClientsToReport = () => {\r\n        const selectedClients = store.getState().selectedClients;\r\n        for (const c of this.state.clientsToAdd) {\r\n            selectedClients.push(c);\r\n        }\r\n        store.dispatch({ type: ActionType.updateSelectedClients, payLoad: selectedClients });\r\n        store.dispatch({ type: ActionType.updateClientsToDisplay, payLoad: [] });\r\n\r\n        const selectedCampaigns: CampaignModel[] = store.getState().selectedCampaigns;\r\n        this.state.clientsToAdd.map(client => {\r\n            getAllCampaigns().map(campaign => {\r\n                if (campaign.clientId === client.clientId) {\r\n                    selectedCampaigns.push(campaign);\r\n                }\r\n            })\r\n        })\r\n\r\n        store.dispatch({ type: ActionType.getSelectedCampaigns, payLoad: selectedCampaigns });\r\n\r\n        const selectedProducts: ProductModel[] = store.getState().selectedProducts;\r\n        this.state.clientsToAdd.map(client => {\r\n            getAllProducts().map(product => {\r\n                if (product.clientId === client.clientId) {\r\n                    selectedProducts.push(product);\r\n\r\n                }\r\n            })\r\n        })\r\n        store.dispatch({ type: ActionType.getSelectedProducts, payLoad: selectedProducts });\r\n\r\n        this.closePopUp();\r\n    }\r\n\r\n    public isExist = (clientId: number) => {\r\n        const selectedClients = [...store.getState().selectedClients];\r\n        for(const c of selectedClients){\r\n            if(c.clientId === clientId){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"full-screen-conatiner\" onClick={this.closePopUp}>\r\n                <div className=\"small-conatiner\" onClick={this.stopPropagation}>\r\n                    <button className=\"close-pop-up-btn\" onClick={this.closePopUp} ><CloseIcon/></button>\r\n                    <div className=\"clients-in-pop-up\">\r\n                        {this.state.companies?.map(company =>\r\n                            <div className=\"company\">\r\n                                <span className=\"company-name\">לקוחות {company}</span>\r\n                                <div className=\"client-in-pop-up\">\r\n                                    {this.state.allClients?.map(client =>\r\n                                        client.company === company &&\r\n                                        <button style={{\r\n                                            backgroundColor: this.isSelcected(client.clientId as number) ? \"black\" : \"\",\r\n                                            color: this.isSelcected(client.clientId as number) ? \"white\" : \"\"\r\n                                        }}\r\n                                            onClick={this.addClient(client)} className=\"pop-up-btn\" \r\n                                            disabled={this.isExist(client.clientId as number)}>\r\n                                            {client.clientName}\r\n                                        </button>\r\n\r\n                                    )}\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some\r\n                                        </button>\r\n                                    <button className=\"pop-up-btn\">\r\n                                        Some company\r\n                                        </button>\r\n\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                    <button onClick={this.addClientsToReport} disabled={this.state.clientsToAdd.length === 0} className=\"add-client-in-pop-up\">הוספה</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Users\\Maya\\Documents\\GitHub\\factory\\src\\components\\product-pop-up\\product-pop-up.tsx",["196","197","198"],"import React, { Component } from \"react\";\r\nimport { ActionType } from \"../../redux/actionType\";\r\nimport { store } from \"../../redux/store\";\r\nimport \"./product-pop-up.css\";\r\nimport { ProductModel } from \"../../models/productModel\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { ProductsType } from \"../../models/productsTypeModel\";\r\nimport { getProductsTypes } from \"../../data/products-types\";\r\nimport { CampaignModel } from \"../../models/campaignModel\";\r\nimport ProgressBar from '@ramonak/react-progress-bar';\r\n\r\n\r\n\r\ninterface ProductPopUpProps {\r\n    product: ProductModel,\r\n    campaign: CampaignModel,\r\n}\r\n\r\ninterface ProductPopUpState {\r\n    images: string[]\r\n}\r\n\r\nexport class ProductPopUp extends Component<ProductPopUpProps, ProductPopUpState>{\r\n\r\n    public constructor(props: ProductPopUpProps) {\r\n        super(props);\r\n        this.state = {\r\n            images: []\r\n        }\r\n    }\r\n\r\n\r\n    public closePopUp = () => {\r\n        store.dispatch({ type: ActionType.changeDisplayForProductsPopUp });\r\n    }\r\n\r\n    public stopPropagation = (e: any) => {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    public getProductType = (productTypeId: number) => {\r\n        if (productTypeId) {\r\n            const productType = getProductsTypes().filter(t => t.productsTypeId === productTypeId);\r\n            return productType[0].nameForSingle;\r\n        }\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (!this.props.product) {\r\n            this.closePopUp();\r\n        }\r\n        const images: any[] = [];\r\n        let productImages = this.props.product.images;\r\n        if (productImages) {\r\n            Object.values(productImages).map(i => {\r\n                images.push(i);\r\n            })\r\n           \r\n        }\r\n        this.setState({ images });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"full-screen-product-conatiner\" onClick={this.closePopUp} >\r\n                <div className=\"small-product-conatiner\" onClick={this.stopPropagation}>\r\n\r\n\r\n                    <div className=\"left-area\">\r\n                        <div className=\"grid-product\">\r\n                            {this.state.images.map(i =>\r\n                                <img className=\"product-img\" src={i} />\r\n                            )}\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"right-area\">\r\n                        <div className=\"titlesInRightArea\">\r\n                            <div className=\"right-in-titles\">\r\n                                <div className=\"product-rate\">{this.props.product?.successRates} %</div>\r\n                            </div>\r\n                            <div className=\"left-in-titles\">\r\n                                <h1 className=\"type-title\">{this.props.product && this.getProductType(this.props.product?.productTypeId as number)}</h1>\r\n                                <p className=\"campaign-name-area\">{this.props.campaign?.campaignName}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"bars-area\">\r\n                            <p className=\"bar-title\">Best practice media</p>\r\n                            <p className=\"bar-rate\">65 %</p>\r\n                            <ProgressBar height=\"7px\" borderRadius=\"0\" bgcolor=\"#FFDB48\" completed={65} />\r\n                        </div>\r\n\r\n                        <div className=\"bars-area\">\r\n                            <p className=\"bar-title\">Best practice media</p>\r\n                            <p className=\"bar-rate\">95 %</p>\r\n                            <ProgressBar height=\"7px\" borderRadius=\"0\" bgcolor=\"#1CE5A2\" completed={95} />\r\n                        </div>\r\n\r\n                        <div className=\"bars-area\">\r\n                            <p className=\"bar-title\">Best practice media</p>\r\n                            <p className=\"bar-rate\">40 %</p>\r\n                            <ProgressBar height=\"7px\" borderRadius=\"0\" bgcolor=\"#E4002B\" completed={40} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <button className=\"close-product-pop-up-btn\" onClick={this.closePopUp} ><CloseIcon /></button>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}",{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":21},{"ruleId":"207","severity":1,"message":"208","line":86,"column":21,"nodeType":"209","endLine":86,"endColumn":88},{"ruleId":"203","severity":1,"message":"210","line":6,"column":10,"nodeType":"205","messageId":"206","endLine":6,"endColumn":25},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"211","severity":1,"message":"212","line":69,"column":44,"nodeType":"213","messageId":"214","endLine":69,"endColumn":46},{"ruleId":"211","severity":1,"message":"215","line":73,"column":17,"nodeType":"216","messageId":"217","endLine":73,"endColumn":24},{"ruleId":"207","severity":1,"message":"208","line":117,"column":56,"nodeType":"209","endLine":117,"endColumn":116},{"ruleId":"207","severity":1,"message":"208","line":121,"column":25,"nodeType":"209","endLine":121,"endColumn":104},{"ruleId":"207","severity":1,"message":"208","line":136,"column":25,"nodeType":"209","endLine":136,"endColumn":95},{"ruleId":"203","severity":1,"message":"218","line":1,"column":28,"nodeType":"205","messageId":"206","endLine":1,"endColumn":34},{"ruleId":"203","severity":1,"message":"219","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":22},{"ruleId":"203","severity":1,"message":"220","line":11,"column":10,"nodeType":"205","messageId":"206","endLine":11,"endColumn":20},{"ruleId":"207","severity":1,"message":"208","line":192,"column":21,"nodeType":"209","endLine":192,"endColumn":94},{"ruleId":"203","severity":1,"message":"218","line":1,"column":28,"nodeType":"205","messageId":"206","endLine":1,"endColumn":34},{"ruleId":"203","severity":1,"message":"221","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":17},{"ruleId":"203","severity":1,"message":"220","line":10,"column":10,"nodeType":"205","messageId":"206","endLine":10,"endColumn":20},{"ruleId":"207","severity":1,"message":"208","line":162,"column":17,"nodeType":"209","endLine":162,"endColumn":90},{"ruleId":"203","severity":1,"message":"218","line":1,"column":28,"nodeType":"205","messageId":"206","endLine":1,"endColumn":34},{"ruleId":"203","severity":1,"message":"220","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":20},{"ruleId":"207","severity":1,"message":"208","line":118,"column":17,"nodeType":"209","endLine":118,"endColumn":172},{"ruleId":"207","severity":1,"message":"208","line":120,"column":21,"nodeType":"209","endLine":120,"endColumn":173},{"ruleId":"207","severity":1,"message":"208","line":127,"column":17,"nodeType":"209","endLine":127,"endColumn":80},{"ruleId":"203","severity":1,"message":"222","line":11,"column":10,"nodeType":"205","messageId":"206","endLine":11,"endColumn":19},{"ruleId":"203","severity":1,"message":"223","line":12,"column":10,"nodeType":"205","messageId":"206","endLine":12,"endColumn":24},{"ruleId":"203","severity":1,"message":"224","line":13,"column":10,"nodeType":"205","messageId":"206","endLine":13,"endColumn":21},{"ruleId":"225","severity":1,"message":"226","line":103,"column":77,"nodeType":"227","messageId":"228","endLine":103,"endColumn":78,"fix":"229"},{"ruleId":"203","severity":1,"message":"230","line":118,"column":15,"nodeType":"205","messageId":"206","endLine":118,"endColumn":44},{"ruleId":"203","severity":1,"message":"231","line":1,"column":10,"nodeType":"205","messageId":"206","endLine":1,"endColumn":14},{"ruleId":"203","severity":1,"message":"232","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":23},{"ruleId":"203","severity":1,"message":"221","line":15,"column":10,"nodeType":"205","messageId":"206","endLine":15,"endColumn":17},{"ruleId":"211","severity":1,"message":"215","line":82,"column":47,"nodeType":"213","messageId":"233","endLine":82,"endColumn":49},{"ruleId":"211","severity":1,"message":"215","line":83,"column":44,"nodeType":"213","messageId":"233","endLine":83,"endColumn":46},{"ruleId":"211","severity":1,"message":"215","line":94,"column":40,"nodeType":"213","messageId":"233","endLine":94,"endColumn":42},{"ruleId":"211","severity":1,"message":"215","line":95,"column":42,"nodeType":"213","messageId":"233","endLine":95,"endColumn":44},{"ruleId":"207","severity":1,"message":"208","line":159,"column":21,"nodeType":"209","endLine":159,"endColumn":113},{"ruleId":"207","severity":1,"message":"208","line":175,"column":37,"nodeType":"209","endLine":175,"endColumn":156},{"ruleId":"207","severity":1,"message":"208","line":189,"column":37,"nodeType":"209","endLine":189,"endColumn":156},{"ruleId":"207","severity":1,"message":"208","line":211,"column":37,"nodeType":"209","endLine":211,"endColumn":157},{"ruleId":"207","severity":1,"message":"208","line":225,"column":37,"nodeType":"209","endLine":225,"endColumn":156},{"ruleId":"207","severity":1,"message":"208","line":240,"column":17,"nodeType":"209","endLine":240,"endColumn":199},{"ruleId":"203","severity":1,"message":"234","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":16},{"ruleId":"203","severity":1,"message":"235","line":4,"column":10,"nodeType":"205","messageId":"206","endLine":4,"endColumn":13},{"ruleId":"203","severity":1,"message":"236","line":1,"column":10,"nodeType":"205","messageId":"206","endLine":1,"endColumn":15},{"ruleId":"203","severity":1,"message":"237","line":2,"column":10,"nodeType":"205","messageId":"206","endLine":2,"endColumn":18},{"ruleId":"203","severity":1,"message":"238","line":3,"column":10,"nodeType":"205","messageId":"206","endLine":3,"endColumn":16},{"ruleId":"203","severity":1,"message":"239","line":1,"column":10,"nodeType":"205","messageId":"206","endLine":1,"endColumn":22},{"ruleId":"211","severity":1,"message":"215","line":41,"column":31,"nodeType":"213","messageId":"233","endLine":41,"endColumn":33},{"ruleId":"211","severity":1,"message":"215","line":88,"column":44,"nodeType":"213","messageId":"233","endLine":88,"endColumn":46},{"ruleId":"211","severity":1,"message":"215","line":89,"column":44,"nodeType":"213","messageId":"233","endLine":89,"endColumn":46},{"ruleId":"211","severity":1,"message":"215","line":99,"column":44,"nodeType":"213","messageId":"233","endLine":99,"endColumn":46},{"ruleId":"211","severity":1,"message":"215","line":100,"column":42,"nodeType":"213","messageId":"233","endLine":100,"endColumn":44},{"ruleId":"203","severity":1,"message":"219","line":7,"column":10,"nodeType":"205","messageId":"206","endLine":7,"endColumn":22},{"ruleId":"211","severity":1,"message":"215","line":55,"column":48,"nodeType":"213","messageId":"233","endLine":55,"endColumn":50},{"ruleId":"207","severity":1,"message":"208","line":72,"column":33,"nodeType":"209","endLine":72,"endColumn":72},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"@typescript-eslint/no-unused-vars","'Unsubscribe' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TopCampaignsNav' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'useRef' is defined but never used.","'ProductsType' is defined but never used.","'AllClients' is defined but never used.","'NavLink' is defined but never used.","'LinkPopUp' is defined but never used.","'AddClientPopUp' is defined but never used.","'ReportModel' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"242","text":"243"},"'allCampaigns' is assigned a value but never used.","'exec' is defined but never used.","'getAllClients' is defined but never used.","expectedInside","'config' is defined but never used.","'act' is defined but never used.","'Store' is defined but never used.","'AppState' is defined but never used.","'Action' is defined but never used.","'ProductModel' is defined but never used.","no-global-assign","no-unsafe-negation",[4447,4466],"\r\n                ."]